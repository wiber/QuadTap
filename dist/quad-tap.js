/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/QuadTap.js":
/*!************************!*\
  !*** ./src/QuadTap.js ***!
  \************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar t;\nt = function t() {\n  return function () {\n    var t = {\n        d: function d(e, o) {\n          for (var n in o) t.o(o, n) && !t.o(e, n) && Object.defineProperty(e, n, {\n            enumerable: !0,\n            get: o[n]\n          });\n        },\n        o: function o(t, e) {\n          return Object.prototype.hasOwnProperty.call(t, e);\n        }\n      },\n      e = {};\n    function o(t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        o = document.createElement(t);\n      if (e.className && (o.className = e.className), e.id && (o.id = e.id), e.text && (o.textContent = e.text), e.html && (o.innerHTML = e.html), e.attributes) for (var n in e.attributes) o.setAttribute(n, e.attributes[n]);\n      if (e.styles) for (var i in e.styles) o.style[i] = e.styles[i];\n      if (e.events) for (var a in e.events) o.addEventListener(a, e.events[a]);\n      return e.children && e.children.forEach(function (t) {\n        o.appendChild(t);\n      }), o;\n    }\n    function n(t, e, o) {\n      if (arguments.length > 3 && void 0 !== arguments[3] && arguments[3]) {\n        var n = t.parentElement;\n        if (n) {\n          var i = n.getBoundingClientRect();\n          e = i.width * e, o = i.height * o;\n        }\n      }\n      t.style.left = e + \"px\", t.style.top = o + \"px\", t.style.transform = \"translate(-50%, -50%)\";\n    }\n    function i(t) {\n      return i = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      }, i(t);\n    }\n    t.d(e, {\n      \"default\": function _default() {\n        return M;\n      }\n    });\n    var a = \"quadTap_\";\n    function r(t, e) {\n      try {\n        var o = a + t;\n        return \"object\" === i(e) ? localStorage.setItem(o, JSON.stringify(e)) : localStorage.setItem(o, e), !0;\n      } catch (t) {\n        return console.error(\"[QuadTap] Error saving to localStorage:\", t), !1;\n      }\n    }\n    function s(t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n      try {\n        var o = a + t,\n          n = localStorage.getItem(o);\n        if (null === n) return e;\n        try {\n          return JSON.parse(n);\n        } catch (t) {\n          return n;\n        }\n      } catch (t) {\n        return console.error(\"[QuadTap] Error retrieving from localStorage:\", t), e;\n      }\n    }\n    function l(t) {\n      return l = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      }, l(t);\n    }\n    function d() {\n      d = function d() {\n        return e;\n      };\n      var t,\n        e = {},\n        o = Object.prototype,\n        n = o.hasOwnProperty,\n        i = \"function\" == typeof Symbol ? Symbol : {},\n        a = i.iterator || \"@@iterator\",\n        r = i.asyncIterator || \"@@asyncIterator\",\n        s = i.toStringTag || \"@@toStringTag\";\n      function c(t, e, o, n) {\n        return Object.defineProperty(t, e, {\n          value: o,\n          enumerable: !n,\n          configurable: !n,\n          writable: !n\n        });\n      }\n      try {\n        c({}, \"\");\n      } catch (t) {\n        c = function c(t, e, o) {\n          return t[e] = o;\n        };\n      }\n      function u(e, o, n, i) {\n        var a = o && o.prototype instanceof g ? o : g,\n          r = Object.create(a.prototype);\n        return c(r, \"_invoke\", function (e, o, n) {\n          var i = 1;\n          return function (a, r) {\n            if (3 === i) throw Error(\"Generator is already running\");\n            if (4 === i) {\n              if (\"throw\" === a) throw r;\n              return {\n                value: t,\n                done: !0\n              };\n            }\n            for (n.method = a, n.arg = r;;) {\n              var s = n.delegate;\n              if (s) {\n                var l = j(s, n);\n                if (l) {\n                  if (l === p) continue;\n                  return l;\n                }\n              }\n              if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n                if (1 === i) throw i = 4, n.arg;\n                n.dispatchException(n.arg);\n              } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n              i = 3;\n              var d = h(e, o, n);\n              if (\"normal\" === d.type) {\n                if (i = n.done ? 4 : 2, d.arg === p) continue;\n                return {\n                  value: d.arg,\n                  done: n.done\n                };\n              }\n              \"throw\" === d.type && (i = 4, n.method = \"throw\", n.arg = d.arg);\n            }\n          };\n        }(e, n, new T(i || [])), !0), r;\n      }\n      function h(t, e, o) {\n        try {\n          return {\n            type: \"normal\",\n            arg: t.call(e, o)\n          };\n        } catch (t) {\n          return {\n            type: \"throw\",\n            arg: t\n          };\n        }\n      }\n      e.wrap = u;\n      var p = {};\n      function g() {}\n      function m() {}\n      function f() {}\n      var b = {};\n      c(b, a, function () {\n        return this;\n      });\n      var v = Object.getPrototypeOf,\n        y = v && v(v(B([])));\n      y && y !== o && n.call(y, a) && (b = y);\n      var w = f.prototype = g.prototype = Object.create(b);\n      function x(t) {\n        [\"next\", \"throw\", \"return\"].forEach(function (e) {\n          c(t, e, function (t) {\n            return this._invoke(e, t);\n          });\n        });\n      }\n      function C(t, e, o) {\n        var n = document.createElement(\"button\");\n        w(n, b);\n\n        // Detect if we're on mobile or small screen\n        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n        var isSmallScreen = window.innerWidth < 768;\n\n        // Apply responsive styles for buttons on mobile/small screens\n        if (isMobile || isSmallScreen) {\n          n.style.width = \"26px\";\n          n.style.height = \"26px\";\n          n.style.margin = \"0 2px\";\n          n.style.fontSize = \"13px\";\n        }\n\n        // Fix alignment issues - using a single block of style definitions\n        n.style.display = \"flex\";\n        n.style.alignItems = \"center\";\n        n.style.justifyContent = \"center\";\n        n.style.lineHeight = \"1\";\n        n.style.padding = \"0\"; // Remove any default padding\n        n.style.verticalAlign = \"middle\";\n        n.textContent = t;\n        n.setAttribute(\"aria-label\", e);\n        n.addEventListener(\"mouseenter\", function () {\n          w(n, v);\n        }), n.addEventListener(\"mouseleave\", function () {\n          n.style.backgroundColor = \"\";\n        }), n.addEventListener(\"click\", function (e) {\n          e.preventDefault();\n          o(e);\n        }),\n        // Add touch events for mobile\n        n.addEventListener(\"touchstart\", function (e) {\n          e.preventDefault(); // Prevent default touch behavior\n          w(n, v); // Apply hover style on touch\n        }), n.addEventListener(\"touchend\", function (e) {\n          e.preventDefault(); // Prevent default touch behavior\n          n.style.backgroundColor = \"\"; // Reset style\n          o(e); // Call the original handler\n        }), n.addEventListener(\"touchcancel\", function (e) {\n          n.style.backgroundColor = \"\"; // Reset style on touch cancel\n        });\n        return n;\n      }\n      function j(t) {\n        var n = o.method,\n          i = e.i[n];\n        if (i === t) return o.delegate = null, \"throw\" === n && e.i[\"return\"] && (o.method = \"return\", o.arg = t, j(e, o), \"throw\" === o.method) || \"return\" !== n && (o.method = \"throw\", o.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), p;\n        var a = h(i, e.i, o.arg);\n        if (\"throw\" === a.type) return o.method = \"throw\", o.arg = a.arg, o.delegate = null, p;\n        var r = a.arg;\n        return r ? r.done ? (o[e.r] = r.value, o.next = e.n, \"return\" !== o.method && (o.method = \"next\", o.arg = t), o.delegate = null, p) : r : (o.method = \"throw\", o.arg = new TypeError(\"iterator result is not an object\"), o.delegate = null, p);\n      }\n      function k(t) {\n        this.tryEntries.push(t);\n      }\n      function S(e) {\n        var o = e[4] || {};\n        o.type = \"normal\", o.arg = t, e[4] = o;\n      }\n      function T(t) {\n        this.tryEntries = [[-1]], t.forEach(k, this), this.reset(!0);\n      }\n      function B(e) {\n        if (null != e) {\n          var o = e[a];\n          if (o) return o.call(e);\n          if (\"function\" == typeof e.next) return e;\n          if (!isNaN(e.length)) {\n            var i = -1,\n              r = function o() {\n                for (; ++i < e.length;) if (n.call(e, i)) return o.value = e[i], o.done = !1, o;\n                return o.value = t, o.done = !0, o;\n              };\n            return r.next = r;\n          }\n        }\n        throw new TypeError(l(e) + \" is not iterable\");\n      }\n      return m.prototype = f, c(w, \"constructor\", f), c(f, \"constructor\", m), m.displayName = c(f, s, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n        var e = \"function\" == typeof t && t.constructor;\n        return !!e && (e === m || \"GeneratorFunction\" === (e.displayName || e.name));\n      }, e.mark = function (t) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(t, f) : (t.__proto__ = f, c(t, s, \"GeneratorFunction\")), t.prototype = Object.create(w), t;\n      }, e.awrap = function (t) {\n        return {\n          __await: t\n        };\n      }, x(C.prototype), c(C.prototype, r, function () {\n        return this;\n      }), e.AsyncIterator = C, e.async = function (t, o, n, i, a) {\n        void 0 === a && (a = Promise);\n        var r = new C(u(t, o, n, i), a);\n        return e.isGeneratorFunction(o) ? r : r.next().then(function (t) {\n          return t.done ? t.value : r.next();\n        });\n      }, x(w), c(w, s, \"Generator\"), c(w, a, function () {\n        return this;\n      }), c(w, \"toString\", function () {\n        return \"[object Generator]\";\n      }), e.keys = function (t) {\n        var e = Object(t),\n          o = [];\n        for (var n in e) o.unshift(n);\n        return function t() {\n          for (; o.length;) if ((n = o.pop()) in e) return t.value = n, t.done = !1, t;\n          return t.done = !0, t;\n        };\n      }, e.values = B, T.prototype = {\n        constructor: T,\n        reset: function reset(e) {\n          if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(S), !e) for (var o in this) \"t\" === o.charAt(0) && n.call(this, o) && !isNaN(+o.slice(1)) && (this[o] = t);\n        },\n        stop: function stop() {\n          this.done = !0;\n          var t = this.tryEntries[0][4];\n          if (\"throw\" === t.type) throw t.arg;\n          return this.rval;\n        },\n        dispatchException: function dispatchException(e) {\n          if (this.done) throw e;\n          var o = this;\n          function n(t) {\n            r.type = \"throw\", r.arg = e, o.next = t;\n          }\n          for (var i = o.tryEntries.length - 1; i >= 0; --i) {\n            var a = this.tryEntries[i],\n              r = a[4],\n              s = this.prev,\n              l = a[1],\n              d = a[2];\n            if (-1 === a[0]) return n(\"end\"), !1;\n            if (!l && !d) throw Error(\"try statement without catch or finally\");\n            if (null != a[0] && a[0] <= s) {\n              if (s < l) return this.method = \"next\", this.arg = t, n(l), !0;\n              if (s < d) return n(d), !1;\n            }\n          }\n        },\n        abrupt: function abrupt(t, e) {\n          for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n            var n = this.tryEntries[o];\n            if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) {\n              var i = n;\n              break;\n            }\n          }\n          i && (\"break\" === t || \"continue\" === t) && i[0] <= e && e <= i[2] && (i = null);\n          var a = i ? i[4] : {};\n          return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i[2], p) : this.complete(a);\n        },\n        complete: function complete(t, e) {\n          if (\"throw\" === t.type) throw t.arg;\n          return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), p;\n        },\n        finish: function finish(t) {\n          for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n            var o = this.tryEntries[e];\n            if (o[2] === t) return this.complete(o[4], o[3]), S(o), p;\n          }\n        },\n        \"catch\": function _catch(t) {\n          for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n            var o = this.tryEntries[e];\n            if (o[0] === t) {\n              var n = o[4];\n              if (\"throw\" === n.type) {\n                var i = n.arg;\n                S(o);\n              }\n              return i;\n            }\n          }\n          throw Error(\"illegal catch attempt\");\n        },\n        delegateYield: function delegateYield(e, o, n) {\n          return this.delegate = {\n            i: B(e),\n            r: o,\n            n: n\n          }, \"next\" === this.method && (this.arg = t), p;\n        }\n      }, e;\n    }\n    function c(t, e, o, n, i, a, r) {\n      try {\n        var s = t[a](r),\n          l = s.value;\n      } catch (t) {\n        return void o(t);\n      }\n      s.done ? e(l) : Promise.resolve(l).then(n, i);\n    }\n    function u(t) {\n      return function () {\n        var e = this,\n          o = arguments;\n        return new Promise(function (n, i) {\n          var a = t.apply(e, o);\n          function r(t) {\n            c(a, n, i, r, s, \"next\", t);\n          }\n          function s(t) {\n            c(a, n, i, r, s, \"throw\", t);\n          }\n          r(void 0);\n        });\n      };\n    }\n    function h() {\n      return (h = u(d().mark(function t(e) {\n        var o, n, i;\n        return d().wrap(function (t) {\n          for (;;) switch (t.prev = t.next) {\n            case 0:\n              if (n = e.elements.video, !(i = (null === (o = e.config.videoPlayerApi) || void 0 === o ? void 0 : o.enabled) && e.config.videoPlayerApi.adapter)) {\n                t.next = 7;\n                break;\n              }\n              return t.next = 5, i.play();\n            case 5:\n              t.next = 16;\n              break;\n            case 7:\n              if (!n) {\n                t.next = 16;\n                break;\n              }\n              return t.prev = 8, t.next = 11, n.play();\n            case 11:\n              t.next = 16;\n              break;\n            case 13:\n              t.prev = 13, t.t0 = t[\"catch\"](8), console.error(\"Error resuming video playback:\", t.t0);\n            case 16:\n            case \"end\":\n              return t.stop();\n          }\n        }, t, null, [[8, 13]]);\n      }))).apply(this, arguments);\n    }\n    function p() {\n      return (p = u(d().mark(function t(e) {\n        var o, n, i;\n        return d().wrap(function (t) {\n          for (;;) switch (t.prev = t.next) {\n            case 0:\n              if (n = e.elements.video, !(i = (null === (o = e.config.videoPlayerApi) || void 0 === o ? void 0 : o.enabled) && e.config.videoPlayerApi.adapter)) {\n                t.next = 11;\n                break;\n              }\n              // QuadTap MOD: Unconditionally pause if adapter exists\n              return t.next = 5, i.pause();\n            case 5:\n              // e.state.wasPlayingBefore = t.sent; // QuadTap MOD: Removed wasPlayingBefore logic\n              // if (!e.state.wasPlayingBefore) {\n              //     t.next = 9;\n              //     break\n              // }\n              // return t.next = 9,\n              // i.pause();\n              // case 9:\n              t.next = 12; // QuadTap MOD: Skip to end after pause\n              break;\n            case 11:\n              // QuadTap MOD: Unconditionally pause if native video element exists\n              n && n.pause();\n            // e.state.wasPlayingBefore = !1; // QuadTap MOD: Removed wasPlayingBefore logic\n            case 12:\n            case \"end\":\n              return t.stop();\n          }\n        }, t);\n      }))).apply(this, arguments);\n    }\n    var g = {\n        width: \"60%\",\n        // Adjusted from 70%\n        maxWidth: \"350px\",\n        // Adjusted from 420px\n        height: \"auto\",\n        padding: \"6px 10px\",\n        // Slightly reduced padding\n        borderRadius: \"24px\",\n        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        // Restored original space-around\n        alignItems: \"center\",\n        boxShadow: \"0 2px 8px rgba(0, 0, 0, 0.3)\",\n        transition: \"opacity 0.3s ease, width 0.3s ease, padding 0.3s ease\"\n      },\n      m = {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n      },\n      f = {\n        position: \"static\",\n        top: \"\",\n        left: \"\",\n        transform: \"\",\n        margin: \"20px auto\"\n      },\n      b = {\n        width: \"30px\",\n        // Adjusted from 32px\n        height: \"30px\",\n        // Adjusted from 32px\n        margin: \"0 3px\",\n        // Adjusted from 4px\n        borderRadius: \"50%\",\n        border: \"none\",\n        backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n        color: \"white\",\n        fontSize: \"14px\",\n        // Adjusted from 15px\n        cursor: \"pointer\",\n        outline: \"none\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        transition: \"background-color 0.2s ease\"\n      },\n      v = {\n        backgroundColor: \"rgba(255, 255, 255, 0.2)\"\n      },\n      y = {\n        position: \"absolute\",\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        color: \"white\",\n        padding: \"5px 10px\",\n        borderRadius: \"4px\",\n        fontSize: \"14px\",\n        zIndex: \"2000\",\n        pointerEvents: \"none\",\n        opacity: \"0\",\n        transition: \"opacity 0.3s ease\"\n      };\n    function w(t, e) {\n      Object.assign(t.style, e);\n    }\n    function x(t) {\n      var e = t.overlay,\n        o = t.onPlay,\n        n = t.onPause,\n        i = t.onRewind,\n        a = t.onForward,\n        r = t.onShare,\n        s = t.onCopyUrl,\n        l = t.rewindTime,\n        d = void 0 === l ? 30 : l,\n        c = t.forwardTime,\n        u = void 0 === c ? 30 : c,\n        h = t.debug,\n        p = void 0 !== h && h,\n        b = t.showAllButtons,\n        v = void 0 !== b && b,\n        y = t.isLightbox,\n        x = void 0 !== y && y,\n        j = document.createElement(\"div\");\n\n      // Apply base styles\n      w(j, g);\n      w(j, x ? f : m);\n\n      // Detect if we're on mobile or small screen\n      var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n      var isSmallScreen = window.innerWidth < 768;\n\n      // Apply responsive styles for mobile/small screens\n      if (isMobile || isSmallScreen) {\n        // Narrower on mobile but not too narrow\n        j.style.width = \"65%\";\n        j.style.maxWidth = \"280px\";\n        j.style.padding = \"5px 8px\";\n      }\n      if (!x) {\n        var T = parseInt(getComputedStyle(e).zIndex) || 1e3;\n        j.style.zIndex = (T + 10).toString();\n      }\n      var B = C(\"⟲\" + d, \"Rewind \" + d + \" seconds\", i),\n        E = C(\"▶\", \"Play/Pause\", function (t) {\n          var e = \"▶\" === E.textContent;\n          E.textContent = e ? \"❚❚\" : \"▶\", e ? o(t) : n(t);\n        }),\n        q = C(\"⟳\" + u, \"Forward \" + u + \" seconds\", a),\n        P = C(\"⤴\", \"Share\", function (t) {\n          if (t.stopPropagation(), r) r(t);else {\n            var e = window.location.href;\n            navigator.share ? navigator.share({\n              title: \"Check out this video moment\",\n              url: e\n            })[\"catch\"](function (t) {\n              console.error(\"Error sharing:\", t);\n            }) : (k(e), S(P, \"Link copied!\"));\n          }\n        }),\n        O = C(\"⧉\", \"Copy URL\", function (t) {\n          t.stopPropagation(), s ? s(t) : (k(window.location.href), S(O, \"Link copied!\"));\n        });\n      if (j.appendChild(B), j.appendChild(E), j.appendChild(q), (v || x) && (j.appendChild(P), j.appendChild(O)),\n      // Add click event handler to stop propagation\n      j.addEventListener(\"click\", function (t) {\n        t.stopPropagation(), p && console.log(\"[QuadTap] Control strip clicked, propagation stopped\");\n      }),\n      // Add touch event handlers for mobile\n      j.addEventListener(\"touchstart\", function (t) {\n        t.stopPropagation();\n        j.style.opacity = \"1\";\n        p && console.log(\"[QuadTap] Control strip touch started, propagation stopped\");\n      }), j.addEventListener(\"touchend\", function (t) {\n        t.stopPropagation();\n        p && console.log(\"[QuadTap] Control strip touch ended, propagation stopped\");\n      }), j.addEventListener(\"touchmove\", function (t) {\n        t.stopPropagation();\n      }), e.appendChild(j), !x) {\n        var z,\n          L = function L() {\n            j.style.opacity = \"0.5\";\n          };\n        j.addEventListener(\"mouseenter\", function () {\n          clearTimeout(z), j.style.opacity = \"1\";\n        }), j.addEventListener(\"mouseleave\", function () {\n          clearTimeout(z), z = setTimeout(L, 2e3);\n        }), j.style.opacity = \"1\", z = setTimeout(L, 2e3);\n      }\n      return p && (console.log(\"[QuadTap] Control strip created with positioning:\", {\n        isLightbox: x,\n        className: j.className,\n        zIndex: j.style.zIndex\n      }), x || new ResizeObserver(function () {\n        var t = j.getBoundingClientRect(),\n          o = e.getBoundingClientRect(),\n          n = (t.top - o.top + t.height / 2) / o.height * 100,\n          i = (t.left - o.left + t.width / 2) / o.width * 100;\n        console.log(\"[QuadTap] Control strip position after resize:\", {\n          topPercent: n.toFixed(2) + \"%\",\n          leftPercent: i.toFixed(2) + \"%\",\n          width: t.width,\n          height: t.height\n        });\n      }).observe(e)), j;\n    }\n    function C(t, e, o) {\n      var n = document.createElement(\"button\");\n      w(n, b);\n\n      // Detect if we're on mobile or small screen\n      var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n      var isSmallScreen = window.innerWidth < 768;\n\n      // Apply responsive styles for buttons on mobile/small screens\n      if (isMobile || isSmallScreen) {\n        n.style.width = \"26px\";\n        n.style.height = \"26px\";\n        n.style.margin = \"0 2px\";\n        n.style.fontSize = \"13px\";\n      }\n\n      // Fix alignment issues - using a single block of style definitions\n      n.style.display = \"flex\";\n      n.style.alignItems = \"center\";\n      n.style.justifyContent = \"center\";\n      n.style.lineHeight = \"1\";\n      n.style.padding = \"0\"; // Remove any default padding\n      n.style.verticalAlign = \"middle\";\n      n.textContent = t;\n      n.setAttribute(\"aria-label\", e);\n      n.addEventListener(\"mouseenter\", function () {\n        w(n, v);\n      }), n.addEventListener(\"mouseleave\", function () {\n        n.style.backgroundColor = \"\";\n      }), n.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        o(e);\n      }),\n      // Add touch events for mobile\n      n.addEventListener(\"touchstart\", function (e) {\n        e.preventDefault(); // Prevent default touch behavior\n        w(n, v); // Apply hover style on touch\n      }), n.addEventListener(\"touchend\", function (e) {\n        e.preventDefault(); // Prevent default touch behavior\n        n.style.backgroundColor = \"\"; // Reset style\n        o(e); // Call the original handler\n      }), n.addEventListener(\"touchcancel\", function (e) {\n        n.style.backgroundColor = \"\"; // Reset style on touch cancel\n      });\n      return n;\n    }\n    function j(t, e) {\n      var o = t.querySelector(\"button:nth-child(2)\");\n      o && (o.textContent = e ? \"❚❚\" : \"▶\");\n    }\n    function k(t) {\n      if (navigator.clipboard && navigator.clipboard.writeText) navigator.clipboard.writeText(t)[\"catch\"](function (t) {\n        console.error(\"Failed to copy text: \", t);\n      });else {\n        var e = document.createElement(\"textarea\");\n        e.value = t, e.style.position = \"fixed\", document.body.appendChild(e), e.select();\n        try {\n          document.execCommand(\"copy\");\n        } catch (t) {\n          console.error(\"Failed to copy text: \", t);\n        }\n        document.body.removeChild(e);\n      }\n    }\n    function S(t, e) {\n      var o = document.createElement(\"div\");\n      w(o, y), o.textContent = e;\n      var n = t.getBoundingClientRect();\n      o.style.top = \"\".concat(n.top - 30, \"px\"), o.style.left = \"\".concat(n.left + n.width / 2, \"px\"), o.style.transform = \"translateX(-50%)\", document.body.appendChild(o), setTimeout(function () {\n        o.style.opacity = \"1\";\n      }, 10), setTimeout(function () {\n        o.style.opacity = \"0\", setTimeout(function () {\n          document.body.removeChild(o);\n        }, 300);\n      }, 1500);\n    }\n    function T(t) {\n      return T = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      }, T(t);\n    }\n    function B(t, e) {\n      for (var o = 0; o < e.length; o++) {\n        var n = e[o];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(t, E(n.key), n);\n      }\n    }\n    function E(t) {\n      var e = function (t) {\n        if (\"object\" != T(t) || !t) return t;\n        var e = t[Symbol.toPrimitive];\n        if (void 0 !== e) {\n          var o = e.call(t, \"string\");\n          if (\"object\" != T(o)) return o;\n          throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return String(t);\n      }(t);\n      return \"symbol\" == T(e) ? e : e + \"\";\n    }\n    var q = {\n      containerId: \"main-video-droppable\",\n      videoSelector: \"#main-video\",\n      autoCancelTimeout: 5e3,\n      debug: !0,\n      emojis: {\n        quadrants: {\n          topLeft: \"🕊️\",\n          topRight: \"🌟\",\n          bottomLeft: \"🌧️\",\n          bottomRight: \"💥\"\n        },\n        directional: {\n          up: \"🚀\",\n          right: \"👑\",\n          down: \"⬇️\",\n          left: \"🤫\"\n        },\n        thoughts: {\n          topLeft: [\"🌸\", \"🎈\", \"🌦️\", \"🛤️\"],\n          topRight: [\"🌈\", \"✨\", \"🌤️\", \"🎆\"],\n          bottomLeft: [\"🍂\", \"🌙\", \"☔\", \"🗿\"],\n          bottomRight: [\"⚖️\", \"🏆\", \"⛈️\", \"💣\"]\n        }\n      },\n      videoControls: {\n        enabled: !0,\n        rewindTime: 30,\n        forwardTime: 30\n      },\n      callbacks: {\n        onOverlayActivate: null,\n        onThrowDownInitiate: null,\n        onThrowDownConfirm: null,\n        onThrowDownCancel: null,\n        onVideoControl: null\n      }\n    };\n    var P = function () {\n      return t = function t() {\n        var e,\n          o,\n          n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n        !function (t, e) {\n          if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, t), this.config = Object.assign({}, q, n), n.emojis && (this.config.emojis = Object.assign({}, q.emojis, n.emojis), n.emojis.quadrants && (this.config.emojis.quadrants = Object.assign({}, q.emojis.quadrants, n.emojis.quadrants)), n.emojis.directional && (this.config.emojis.directional = Object.assign({}, q.emojis.directional, n.emojis.directional)), n.emojis.thoughts && (this.config.emojis.thoughts = Object.assign({}, q.emojis.thoughts, n.emojis.thoughts))), n.videoControls && (this.config.videoControls = Object.assign({}, q.videoControls, n.videoControls)), n.profileBubble ? this.config.profileBubble = Object.assign({}, {\n          imageUrl: null,\n          fallbackEmoji: \"👤\",\n          size: \"60px\",\n          borderColor: \"white\",\n          borderWidth: \"2px\",\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\"\n        }, n.profileBubble) : this.config.profileBubble = {\n          imageUrl: null,\n          fallbackEmoji: \"👤\",\n          size: \"60px\",\n          borderColor: \"white\",\n          borderWidth: \"2px\",\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\"\n        }, n.colors ? (this.config.colors = {\n          overlay: {\n            background: \"rgba(240, 240, 245, 0.5)\",\n            quadrantGradients: {\n              topLeft: \"rgba(0, 255, 255, 0.8)\",\n              topRight: \"rgba(255, 255, 0, 0.8)\",\n              bottomLeft: \"rgba(0, 255, 0, 0.8)\",\n              bottomRight: \"rgba(255, 0, 255, 0.8)\"\n            }\n          },\n          lightbox: {\n            background: \"rgba(20, 30, 40, 0.95)\",\n            text: \"white\",\n            headerBackground: \"rgba(30, 40, 60, 0.8)\",\n            buttonPrimary: \"#4CAF50\",\n            buttonSecondary: \"#f44336\"\n          }\n        }, n.colors.overlay && (this.config.colors.overlay = Object.assign({}, this.config.colors.overlay, n.colors.overlay), n.colors.overlay.quadrantGradients && (this.config.colors.overlay.quadrantGradients = Object.assign({}, this.config.colors.overlay.quadrantGradients, n.colors.overlay.quadrantGradients))), n.colors.lightbox && (this.config.colors.lightbox = Object.assign({}, this.config.colors.lightbox, n.colors.lightbox))) : this.config.colors = {\n          overlay: {\n            background: \"rgba(240, 240, 245, 0.5)\",\n            quadrantGradients: {\n              topLeft: \"rgba(0, 255, 255, 0.8)\",\n              topRight: \"rgba(255, 255, 0, 0.8)\",\n              bottomLeft: \"rgba(0, 255, 0, 0.8)\",\n              bottomRight: \"rgba(255, 0, 255, 0.8)\"\n            }\n          },\n          lightbox: {\n            background: \"rgba(20, 30, 40, 0.95)\",\n            text: \"white\",\n            headerBackground: \"rgba(30, 40, 60, 0.8)\",\n            buttonPrimary: \"#4CAF50\",\n            buttonSecondary: \"#f44336\"\n          }\n        }, this.state = {\n          active: !1,\n          profileBubblePosition: {\n            x: 0,\n            y: 0\n          },\n          currentQuadrant: null,\n          autoCancelTimer: null,\n          containerDimensions: {\n            width: 0,\n            height: 0\n          },\n          videoPlaying: !1,\n          wasPlayingBefore: !1,\n          recording: !1,\n          mediaStream: null,\n          mediaRecorder: null,\n          recordingStartTime: 0,\n          recordingIndicator: null,\n          swipeDebounceTimer: null,\n          // For debounce timing\n          swipeProcessing: !1 // Add this to track active swipe processing\n        }, this.elements = {\n          container: null,\n          video: null,\n          overlay: null,\n          profileBubble: null,\n          directionalEmojis: {},\n          quadrantEmojis: {},\n          videoControls: null,\n          tooltip: null,\n          lightBox: null,\n          lightBoxContent: null,\n          emojiGrid: null,\n          commentBox: null\n        }, this.throttledResize = (e = this.handleResize.bind(this), function () {\n          o || (e.apply(void 0, arguments), o = !0, setTimeout(function () {\n            o = !1;\n          }, 100));\n        }), this.init();\n      }, e = [{\n        key: \"log\",\n        value: function value(t, e) {\n          this.config.debug && console.log(\"[QuadTap] \".concat(t), e || \"\");\n        }\n      }, {\n        key: \"init\",\n        value: function value() {\n          this.log(\"Initializing QuadTap\");\n          var t = document.getElementById(this.config.containerId);\n          t ? (this.elements.container = t, function () {\n            if (!document.getElementById(\"quad-tap-styles\")) {\n              var t = document.createElement(\"style\");\n              t.id = \"quad-tap-styles\", t.textContent = \"\\n    /* Overlay Container */\\n    .overlay-container {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      display: flex;\\n      opacity: 0;\\n      pointer-events: none;\\n      transition: opacity 0.3s ease;\\n      z-index: 1000;\\n      background-color: rgba(240, 240, 245, 0.5);\\n    }\\n    \\n    .overlay-container.active {\\n      opacity: 1;\\n      pointer-events: auto;\\n    }\\n    \\n    /* Block pointer events on video when overlay is active */\\n    .overlay-container.active + video,\\n    .quad-tap-overlay.active + video {\\n      pointer-events: none;\\n    }\\n    \\n    /* Quadrants */\\n    .quadrant {\\n      position: absolute;\\n      width: 50%;\\n      height: 50%;\\n      opacity: 0.8;\\n      transition: opacity 0.3s ease;\\n    }\\n    \\n    .quadrant.top-left {\\n      top: 0;\\n      left: 0;\\n      background: linear-gradient(135deg, rgba(0, 255, 255, 0.8), rgba(0, 255, 255, 0));\\n    }\\n    \\n    .quadrant.top-right {\\n      top: 0;\\n      right: 0;\\n      background: linear-gradient(225deg, rgba(255, 255, 0, 0.8), rgba(255, 255, 0, 0));\\n    }\\n    \\n    .quadrant.bottom-left {\\n      bottom: 0;\\n      left: 0;\\n      background: linear-gradient(45deg, rgba(0, 255, 0, 0.8), rgba(0, 255, 0, 0));\\n    }\\n    \\n    .quadrant.bottom-right {\\n      bottom: 0;\\n      right: 0;\\n      background: linear-gradient(315deg, rgba(255, 0, 255, 0.8), rgba(255, 0, 255, 0));\\n    }\\n    \\n    /* Profile Bubble */\\n    .profile-bubble {\\n      position: absolute;\\n      width: 60px;\\n      height: 60px;\\n      border-radius: 50%;\\n      background-color: rgba(128, 128, 128, 0.8);\\n      border: 2px solid white;\\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      cursor: pointer;\\n      z-index: 1001;\\n      transform: translate(-50%, -50%);\\n      transition: transform 0.2s ease, box-shadow 0.2s ease;\\n    }\\n    \\n    .profile-bubble:hover {\\n      transform: translate(-50%, -50%) scale(1.1);\\n      box-shadow: 0 0 15px rgba(0, 0, 0, 0.7);\\n    }\\n    \\n    /* Light-Box Modal */\\n    .td-modal {\\n      display: none;\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      background-color: rgba(23, 32, 42, 0.7);\\n      z-index: 2000;\\n      justify-content: center;\\n      align-items: center;\\n      opacity: 0;\\n      transition: opacity 0.3s ease;\\n    }\\n    \\n    .td-modal.active {\\n      display: flex;\\n      opacity: 1;\\n    }\\n    \\n    .td-modal-content {\\n      background-color: white;\\n      padding: 20px;\\n      border-radius: 10px;\\n      width: 95%;\\n      max-width: 800px;\\n      max-height: 80vh;\\n      overflow-y: auto;\\n      position: relative;\\n      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\\n    }\\n    \\n    .td-modal-header {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      margin-bottom: 20px;\\n      padding-bottom: 10px;\\n      border-bottom: 1px solid #eee;\\n    }\\n    \\n    .td-modal-header h4 {\\n      margin: 0;\\n      font-size: 1.5rem;\\n      color: #333;\\n    }\\n    \\n    .td-close-btn, .td-pause-play-btn {\\n      background: none;\\n      border: none;\\n      font-size: 1.5rem;\\n      cursor: pointer;\\n      color: #999;\\n      transition: color 0.2s ease;\\n    }\\n    \\n    .td-close-btn {\\n      margin-left: 10px;\\n    }\\n    \\n    .td-pause-play-btn {\\n      margin-left: auto;\\n    }\\n    \\n    .td-close-btn:hover, .td-pause-play-btn:hover {\\n      color: #333;\\n    }\\n    \\n    /* Emoji Grid */\\n    .emoji-grid {\\n      display: grid;\\n      grid-template-columns: 1fr 1fr;\\n      grid-template-rows: 1fr 1fr;\\n      gap: 10px;\\n      width: 100%;\\n    }\\n    \\n    .emoji-quadrant {\\n      padding: 10px;\\n      border-radius: 8px;\\n    }\\n    \\n    .emoji-quadrant.top-left {\\n      background-color: rgba(0, 255, 255, 0.2);\\n    }\\n    \\n    .emoji-quadrant.top-right {\\n      background-color: rgba(255, 255, 0, 0.2);\\n    }\\n    \\n    .emoji-quadrant.bottom-left {\\n      background-color: rgba(0, 255, 0, 0.2);\\n    }\\n    \\n    .emoji-quadrant.bottom-right {\\n      background-color: rgba(255, 0, 255, 0.2);\\n    }\\n    \\n    .emoji-row {\\n      display: flex;\\n      justify-content: space-around;\\n      margin-bottom: 10px;\\n      background-color: transparent;\\n    }\\n    \\n    .emoji-cell {\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      background-color: transparent;\\n    }\\n    \\n    .thought-emoji {\\n      font-size: 2rem;\\n      cursor: pointer;\\n      padding: 5px;\\n      border-radius: 5px;\\n      transition: transform 0.2s ease, background-color 0.2s ease;\\n    }\\n    \\n    .thought-emoji:hover {\\n      transform: scale(1.2);\\n      background-color: rgba(255, 255, 255, 0.5);\\n    }\\n    \\n    .thought-emoji.selected {\\n      background-color: rgba(255, 255, 255, 0.8);\\n      box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\\n    }\\n    \\n    /* Tooltip */\\n    .tooltip {\\n      position: absolute;\\n      background-color: rgba(0, 0, 0, 0.7);\\n      color: white;\\n      padding: 5px 10px;\\n      border-radius: 5px;\\n      font-size: 0.8rem;\\n      pointer-events: none;\\n      z-index: 1002;\\n      transition: opacity 0.3s ease;\\n    }\\n    \\n    /* Comment Box */\\n    .comment-box {\\n      margin-top: 20px;\\n      width: 100%;\\n    }\\n    \\n    .comment-box textarea {\\n      width: 100%;\\n      padding: 10px;\\n      border: 1px solid #ddd;\\n      border-radius: 5px;\\n      resize: vertical;\\n      min-height: 80px;\\n      font-family: inherit;\\n    }\\n    \\n    /* Media Buttons */\\n    .media-buttons {\\n      display: flex;\\n      flex-wrap: wrap;\\n      gap: 10px;\\n      margin-top: 10px;\\n      margin-bottom: 10px;\\n    }\\n    \\n    .media-button {\\n      padding: 8px 12px;\\n      border: none;\\n      border-radius: 5px;\\n      cursor: pointer;\\n      font-weight: bold;\\n      transition: background-color 0.2s ease;\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n    \\n    .upload-button {\\n      background-color: #3498db;\\n      color: white;\\n    }\\n    \\n    .upload-button:hover {\\n      background-color: #2980b9;\\n    }\\n    \\n    .capture-button {\\n      background-color: #e74c3c;\\n      color: white;\\n    }\\n    \\n    .capture-button:hover {\\n      background-color: #c0392b;\\n    }\\n    \\n    .uploaded-file-name {\\n      margin-top: 5px;\\n      padding: 5px;\\n      background-color: #f1f1f1;\\n      border-radius: 3px;\\n      font-size: 0.9rem;\\n      width: 100%;\\n    }\\n    \\n    .recording-message {\\n      margin-top: 5px;\\n      padding: 5px;\\n      background-color: #f8d7da;\\n      color: #721c24;\\n      border-radius: 3px;\\n      font-size: 0.9rem;\\n      width: 100%;\\n    }\\n    \\n    .recording-indicator {\\n      animation: pulse 1.5s infinite;\\n    }\\n    \\n    @keyframes pulse {\\n      0% { opacity: 1; }\\n      50% { opacity: 0.5; }\\n      100% { opacity: 1; }\\n    }\\n    \\n    /* Action Buttons */\\n    .action-buttons {\\n      display: flex;\\n      justify-content: flex-end;\\n      margin-top: 20px;\\n      gap: 10px;\\n    }\\n    \\n    .action-button {\\n      padding: 8px 16px;\\n      border: none;\\n      border-radius: 5px;\\n      cursor: pointer;\\n      font-weight: bold;\\n      transition: background-color 0.2s ease;\\n    }\\n    \\n    .save-button {\\n      background-color: #4CAF50;\\n      color: white;\\n    }\\n    \\n    .save-button:hover {\\n      background-color: #45a049;\\n    }\\n    \\n    .cancel-button {\\n      background-color: #f44336;\\n      color: white;\\n    }\\n    \\n    .cancel-button:hover {\\n      background-color: #d32f2f;\\n    }\\n  \", document.head.appendChild(t);\n            }\n          }(), this.createOverlayElements(), this.createLightBoxElements(), this.bindEventHandlers(), this.log(\"QuadTap initialized successfully\")) : this.log(\"Container not found\", this.config.containerId);\n        }\n      }, {\n        key: \"createOverlayElements\",\n        value: function value() {\n          var t = this,\n            e = o(\"div\", {\n              className: \"quad-tap-overlay\",\n              styles: {\n                display: \"none\",\n                backgroundColor: this.config.colors.overlay.background\n              }\n            }),\n            n = o(\"div\", {\n              className: \"overlay-close-btn\",\n              html: \"&times;\",\n              styles: {\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\",\n                width: \"30px\",\n                height: \"30px\",\n                borderRadius: \"50%\",\n                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n                color: \"white\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                fontSize: \"20px\",\n                cursor: \"pointer\",\n                zIndex: \"1002\"\n              },\n              events: {\n                click: function click(e) {\n                  t.deactivateOverlay(), e.stopPropagation();\n                }\n              }\n            }),\n            i = o(\"div\", {\n              className: \"quadrant top-left\",\n              styles: {\n                background: \"radial-gradient(circle at 0% 0%, \".concat(this.config.colors.overlay.quadrantGradients.topLeft, \", transparent 70%)\")\n              }\n            }),\n            a = o(\"div\", {\n              className: \"quadrant top-right\",\n              styles: {\n                background: \"radial-gradient(circle at 100% 0%, \".concat(this.config.colors.overlay.quadrantGradients.topRight, \", transparent 70%)\")\n              }\n            }),\n            r = o(\"div\", {\n              className: \"quadrant bottom-left\",\n              styles: {\n                background: \"radial-gradient(circle at 0% 100%, \".concat(this.config.colors.overlay.quadrantGradients.bottomLeft, \", transparent 70%)\")\n              }\n            }),\n            s = o(\"div\", {\n              className: \"quadrant bottom-right\",\n              styles: {\n                background: \"radial-gradient(circle at 100% 100%, \".concat(this.config.colors.overlay.quadrantGradients.bottomRight, \", transparent 70%)\")\n              }\n            }),\n            l = {\n              display: \"none\",\n              width: this.config.profileBubble.size,\n              height: this.config.profileBubble.size,\n              borderColor: this.config.profileBubble.borderColor,\n              borderWidth: this.config.profileBubble.borderWidth,\n              backgroundColor: this.config.profileBubble.backgroundColor,\n              borderStyle: \"solid\",\n              borderRadius: \"50%\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              fontSize: \"24px\",\n              boxShadow: \"0 0 10px rgba(0, 0, 0, 0.5)\",\n              cursor: \"pointer\",\n              zIndex: \"1000\"\n            };\n          this.config.profileBubble.imageUrl && (l.backgroundImage = \"url(\".concat(this.config.profileBubble.imageUrl, \")\"), l.backgroundSize = \"cover\", l.backgroundPosition = \"center\", l.fontSize = \"0\");\n          var d = o(\"div\", {\n              className: \"profile-bubble\",\n              text: this.config.profileBubble.imageUrl ? \"\" : this.config.profileBubble.fallbackEmoji,\n              styles: l\n            }),\n            c = o(\"div\", {\n              className: \"directional-emoji up\",\n              text: this.config.emojis.directional.up,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            u = o(\"div\", {\n              className: \"directional-emoji right\",\n              text: this.config.emojis.directional.right,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            h = o(\"div\", {\n              className: \"directional-emoji down\",\n              text: this.config.emojis.directional.down,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            p = o(\"div\", {\n              className: \"directional-emoji left\",\n              text: this.config.emojis.directional.left,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            g = o(\"div\", {\n              className: \"quadrant-emoji top-left\",\n              text: this.config.emojis.quadrants.topLeft,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            m = o(\"div\", {\n              className: \"quadrant-emoji top-right\",\n              text: this.config.emojis.quadrants.topRight,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            f = o(\"div\", {\n              className: \"quadrant-emoji bottom-left\",\n              text: this.config.emojis.quadrants.bottomLeft,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            b = o(\"div\", {\n              className: \"quadrant-emoji bottom-right\",\n              text: this.config.emojis.quadrants.bottomRight,\n              styles: {\n                display: \"none\"\n              }\n            }),\n            v = this.createVideoControls(),\n            y = o(\"div\", {\n              className: \"tooltip\",\n              text: \"Tap elsewhere to cancel\",\n              styles: {\n                display: \"none\"\n              }\n            });\n          e.appendChild(n), e.appendChild(i), e.appendChild(a), e.appendChild(r), e.appendChild(s), e.appendChild(c), e.appendChild(u), e.appendChild(h), e.appendChild(p), e.appendChild(g), e.appendChild(m), e.appendChild(f), e.appendChild(b), e.appendChild(d), e.appendChild(v), e.appendChild(y), this.elements.container.appendChild(e), this.elements.overlay = e, this.elements.profileBubble = d, this.elements.directionalEmojis = {\n            up: c,\n            right: u,\n            down: h,\n            left: p\n          }, this.elements.quadrantEmojis = {\n            topLeft: g,\n            topRight: m,\n            bottomLeft: f,\n            bottomRight: b\n          }, this.elements.videoControls = v, this.elements.tooltip = y;\n        }\n      }, {\n        key: \"createVideoControls\",\n        value: function value() {\n          var t = this,\n            e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          if (!this.config.videoControls.enabled) return o(\"div\", {\n            styles: {\n              display: \"none\"\n            }\n          });\n          var n = document.querySelector(this.config.videoSelector),\n            i = x({\n              overlay: e ? this.elements.lightBoxContent || document.createElement(\"div\") : this.elements.overlay || document.createElement(\"div\"),\n              onPlay: function onPlay() {\n                n && n.play();\n              },\n              onPause: function onPause() {\n                n && n.pause();\n              },\n              onRewind: function onRewind() {\n                n && (n.currentTime = Math.max(0, n.currentTime - t.config.videoControls.rewindTime));\n              },\n              onForward: function onForward() {\n                n && (n.currentTime = Math.min(n.duration, n.currentTime + t.config.videoControls.forwardTime));\n              },\n              rewindTime: this.config.videoControls.rewindTime,\n              forwardTime: this.config.videoControls.forwardTime,\n              debug: this.config.debug,\n              showAllButtons: !0,\n              isLightbox: e\n            });\n          return e || (i.style.display = \"none\"), this.elements.videoControlsObj = {\n            element: i,\n            setMode: function setMode(e, o) {\n              !function (t, e, o) {\n                if (t.classList.remove(\"qt-control-strip--overlay\"), t.classList.remove(\"qt-control-strip--lightbox\"), \"overlay\" === e) {\n                  t.classList.add(\"qt-control-strip--overlay\"), t.style.position = \"absolute\", t.style.bottom = \"20px\", t.style.left = \"50%\", t.style.transform = \"translateX(-50%)\", t.style.zIndex = \"1000\";\n                  var n = o.offsetWidth;\n                  t.style.width = \"\".concat(Math.min(.8 * n, 400), \"px\"), t.style.boxShadow = \"0 2px 10px rgba(0, 0, 0, 0.3)\";\n                } else \"lightbox\" === e && (t.classList.add(\"qt-control-strip--lightbox\"), t.style.position = \"static\", t.style.bottom = \"\", t.style.left = \"\", t.style.transform = \"\", t.style.zIndex = \"\", t.style.width = \"100%\", t.style.boxShadow = \"none\");\n              }(i, \"lightbox\" === e, o || t.elements.container);\n            },\n            updateTimeDisplay: function updateTimeDisplay() {},\n            updatePlayPauseButton: function updatePlayPauseButton(t) {\n              j(i, t);\n            }\n          }, i;\n        }\n      }, {\n        key: \"createLightboxControlStrip\",\n        value: function value() {\n          var t = this;\n          if (!this.config.videoControls.enabled) return o(\"div\", {\n            styles: {\n              display: \"none\"\n            }\n          });\n          var e = o(\"div\", {\n              className: \"td-lightbox-controls\",\n              styles: {\n                width: \"100%\",\n                padding: \"10px 0\",\n                marginTop: \"10px\",\n                marginBottom: \"10px\",\n                borderTop: \"1px solid rgba(255, 255, 255, 0.1)\",\n                borderBottom: \"1px solid rgba(255, 255, 255, 0.1)\",\n                display: \"flex\",\n                flexDirection: \"column\"\n              }\n            }),\n            n = document.querySelector(this.config.videoSelector),\n            i = x({\n              overlay: this.elements.lightBoxContent || document.createElement(\"div\"),\n              onPlay: function onPlay() {\n                n && n.play();\n              },\n              onPause: function onPause() {\n                n && n.pause();\n              },\n              onRewind: function onRewind() {\n                n && (n.currentTime = Math.max(0, n.currentTime - t.config.videoControls.rewindTime));\n              },\n              onForward: function onForward() {\n                n && (n.currentTime = Math.min(n.duration, n.currentTime + t.config.videoControls.forwardTime));\n              },\n              rewindTime: this.config.videoControls.rewindTime,\n              forwardTime: this.config.videoControls.forwardTime,\n              debug: this.config.debug,\n              showAllButtons: !0,\n              isLightbox: !0\n            });\n          return this.elements.lightboxControlStripObj = {\n            element: i,\n            updateTimeDisplay: function updateTimeDisplay() {},\n            updatePlayPauseButton: function updatePlayPauseButton(t) {\n              j(i, t);\n            }\n          }, this.elements.lightboxControlStrip = i, e.appendChild(i), e;\n        }\n      }, {\n        key: \"createLightBoxElements\",\n        value: function value() {\n          var t = this;\n          // Overlay (gray out background)\n          var overlay = document.createElement('div');\n          overlay.id = 'qt-overlay';\n          overlay.style.position = 'absolute';\n          overlay.style.top = '0';\n          overlay.style.left = '0';\n          overlay.style.width = '100%';\n          overlay.style.height = '100%';\n          overlay.style.background = 'rgba(23, 32, 42, 0.7)'; // Increased opacity for more prominent overlay\n          overlay.style.zIndex = '9999';\n          overlay.style.display = 'none';\n          overlay.style.justifyContent = 'center';\n          overlay.style.alignItems = 'center';\n          overlay.style.pointerEvents = 'auto';\n          overlay.style.transition = 'opacity 0.3s ease';\n          overlay.style.opacity = '1';\n\n          // Modal (white box)\n          var modal = document.createElement('div');\n          modal.id = 'qt-modal';\n          modal.style.position = 'absolute';\n          modal.style.top = '50%';\n          modal.style.left = '50%';\n          modal.style.transform = 'translate(-50%, -50%)';\n          modal.style.background = '#ffffff'; // Ensuring white background\n          modal.style.padding = '32px';\n          modal.style.borderRadius = '14px';\n          modal.style.boxShadow = '0 2px 16px rgba(0,0,0,0.2)';\n          modal.style.zIndex = '10000';\n          modal.style.maxWidth = '95vw';\n          modal.style.maxHeight = '80vh';\n          modal.style.overflowY = 'auto';\n          modal.style.display = 'flex';\n          modal.style.flexDirection = 'column';\n          modal.style.alignItems = 'center';\n          modal.style.pointerEvents = 'auto';\n          modal.style.minWidth = '600px';\n\n          // Simple React compatibility - prevent event bubbling\n          modal.addEventListener('click', function (e) {\n            e.stopPropagation();\n          });\n\n          // Create header\n          var header = document.createElement('h2');\n          header.textContent = 'QuadTap Input';\n          header.style.marginBottom = '20px';\n          header.style.color = '#333';\n          header.style.textAlign = 'center';\n          modal.appendChild(header);\n\n          // Create position inputs container\n          var positionContainer = document.createElement('div');\n          positionContainer.style.display = 'flex';\n          positionContainer.style.gap = '20px';\n          positionContainer.style.marginBottom = '20px';\n          positionContainer.style.alignItems = 'center';\n\n          // X position input\n          var xLabel = document.createElement('label');\n          xLabel.textContent = 'X%: ';\n          xLabel.style.fontWeight = 'bold';\n          var xInput = document.createElement('input');\n          xInput.type = 'number';\n          xInput.min = '0';\n          xInput.max = '100';\n          xInput.value = '50';\n          xInput.style.width = '80px';\n          xInput.style.padding = '8px';\n          xInput.style.border = '2px solid #ddd';\n          xInput.style.borderRadius = '4px';\n          xInput.style.fontSize = '16px';\n          this.elements.positionInputX = xInput;\n\n          // Y position input\n          var yLabel = document.createElement('label');\n          yLabel.textContent = 'Y%: ';\n          yLabel.style.fontWeight = 'bold';\n          var yInput = document.createElement('input');\n          yInput.type = 'number';\n          yInput.min = '0';\n          yInput.max = '100';\n          yInput.value = '50';\n          yInput.style.width = '80px';\n          yInput.style.padding = '8px';\n          yInput.style.border = '2px solid #ddd';\n          yInput.style.borderRadius = '4px';\n          yInput.style.fontSize = '16px';\n          this.elements.positionInputY = yInput;\n          positionContainer.appendChild(xLabel);\n          positionContainer.appendChild(xInput);\n          positionContainer.appendChild(yLabel);\n          positionContainer.appendChild(yInput);\n          modal.appendChild(positionContainer);\n\n          // Create emoji grid\n          var emojiGrid = this.createEmojiGrid();\n          emojiGrid.style.marginBottom = '20px';\n          modal.appendChild(emojiGrid);\n          this.elements.emojiGrid = emojiGrid;\n\n          // Create comment box\n          var commentBox = document.createElement('div');\n          commentBox.style.width = '100%';\n          commentBox.style.marginBottom = '20px';\n          var commentLabel = document.createElement('label');\n          commentLabel.textContent = 'Comment:';\n          commentLabel.style.display = 'block';\n          commentLabel.style.marginBottom = '8px';\n          commentLabel.style.fontWeight = 'bold';\n          var commentTextarea = document.createElement('textarea');\n          commentTextarea.rows = 4;\n          commentTextarea.style.width = '100%';\n          commentTextarea.style.padding = '10px';\n          commentTextarea.style.border = '2px solid #ddd';\n          commentTextarea.style.borderRadius = '4px';\n          commentTextarea.style.fontSize = '14px';\n          commentTextarea.style.resize = 'vertical';\n          commentTextarea.placeholder = 'Add your comment here...';\n          commentBox.appendChild(commentLabel);\n          commentBox.appendChild(commentTextarea);\n          modal.appendChild(commentBox);\n          this.elements.commentBox = commentBox;\n\n          // Create media upload section\n          var mediaSection = document.createElement('div');\n          mediaSection.style.width = '100%';\n          mediaSection.style.marginBottom = '20px';\n          var mediaLabel = document.createElement('label');\n          mediaLabel.textContent = 'Media:';\n          mediaLabel.style.display = 'block';\n          mediaLabel.style.marginBottom = '8px';\n          mediaLabel.style.fontWeight = 'bold';\n          var mediaButtons = document.createElement('div');\n          mediaButtons.className = 'media-buttons';\n          mediaButtons.style.display = 'flex';\n          mediaButtons.style.gap = '10px';\n          mediaButtons.style.marginBottom = '10px';\n\n          // File upload button\n          var uploadButton = document.createElement('button');\n          uploadButton.textContent = '📁 Upload File';\n          uploadButton.className = 'upload-button';\n          uploadButton.style.padding = '8px 12px';\n          uploadButton.style.backgroundColor = '#3498db';\n          uploadButton.style.color = 'white';\n          uploadButton.style.border = 'none';\n          uploadButton.style.borderRadius = '4px';\n          uploadButton.style.cursor = 'pointer';\n          uploadButton.addEventListener('click', function (e) {\n            e.preventDefault();\n            var fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = 'image/*,video/*';\n            fileInput.style.display = 'none';\n            fileInput.addEventListener('change', function (e) {\n              if (e.target.files && e.target.files[0]) {\n                var file = e.target.files[0];\n                t.log('File uploaded', {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type\n                });\n                // Store file reference\n                r('uploadedFile', file.name);\n                r('uploadedFileType', file.type);\n                // Show uploaded file name\n                var fileName = document.createElement('div');\n                fileName.className = 'uploaded-file-name';\n                fileName.textContent = '📎 ' + file.name;\n                fileName.style.marginTop = '5px';\n                fileName.style.padding = '5px';\n                fileName.style.backgroundColor = '#f1f1f1';\n                fileName.style.borderRadius = '3px';\n                fileName.style.fontSize = '0.9rem';\n                mediaSection.appendChild(fileName);\n              }\n            });\n            document.body.appendChild(fileInput);\n            fileInput.click();\n            document.body.removeChild(fileInput);\n          });\n\n          // Video capture button\n          var captureButton = document.createElement('button');\n          captureButton.textContent = '🎥 Record Video';\n          captureButton.className = 'capture-button';\n          captureButton.style.padding = '8px 12px';\n          captureButton.style.backgroundColor = '#e74c3c';\n          captureButton.style.color = 'white';\n          captureButton.style.border = 'none';\n          captureButton.style.borderRadius = '4px';\n          captureButton.style.cursor = 'pointer';\n          captureButton.addEventListener('click', function (e) {\n            e.preventDefault();\n            if (t.state.recording) {\n              t.stopRecording();\n              captureButton.textContent = '🎥 Record Video';\n            } else {\n              t.startRecording();\n              captureButton.textContent = '⏹️ Stop Recording';\n            }\n          });\n          mediaButtons.appendChild(uploadButton);\n          mediaButtons.appendChild(captureButton);\n          mediaSection.appendChild(mediaLabel);\n          mediaSection.appendChild(mediaButtons);\n          modal.appendChild(mediaSection);\n          this.elements.mediaSection = mediaSection;\n\n          // Create buttons container\n          var buttonsContainer = document.createElement('div');\n          buttonsContainer.style.display = 'flex';\n          buttonsContainer.style.gap = '10px';\n          buttonsContainer.style.justifyContent = 'center';\n\n          // Save button\n          var saveButton = document.createElement('button');\n          saveButton.textContent = 'Save';\n          saveButton.style.padding = '10px 20px';\n          saveButton.style.backgroundColor = '#4CAF50';\n          saveButton.style.color = 'white';\n          saveButton.style.border = 'none';\n          saveButton.style.borderRadius = '4px';\n          saveButton.style.cursor = 'pointer';\n          saveButton.style.fontSize = '16px';\n          saveButton.addEventListener('click', function () {\n            t.saveThrowDown();\n          });\n\n          // Cancel button\n          var cancelButton = document.createElement('button');\n          cancelButton.textContent = 'Cancel';\n          cancelButton.style.padding = '10px 20px';\n          cancelButton.style.backgroundColor = '#f44336';\n          cancelButton.style.color = 'white';\n          cancelButton.style.border = 'none';\n          cancelButton.style.borderRadius = '4px';\n          cancelButton.style.cursor = 'pointer';\n          cancelButton.style.fontSize = '16px';\n          cancelButton.addEventListener('click', function () {\n            t.closeLightBox();\n          });\n          buttonsContainer.appendChild(saveButton);\n          buttonsContainer.appendChild(cancelButton);\n          modal.appendChild(buttonsContainer);\n\n          // Make overlay show/hide the modal\n          overlay.style.display = 'flex';\n          overlay.style.visibility = 'hidden';\n\n          // Show overlay when 'active' class is added\n          var observer = new MutationObserver(function (mutations) {\n            mutations.forEach(function (mutation) {\n              if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                if (overlay.classList.contains('active')) {\n                  overlay.style.visibility = 'visible';\n                  overlay.style.display = 'flex';\n                } else {\n                  overlay.style.visibility = 'hidden';\n                  setTimeout(function () {\n                    if (!overlay.classList.contains('active')) {\n                      overlay.style.display = 'none';\n                    }\n                  }, 300);\n                }\n              }\n            });\n          });\n          observer.observe(overlay, {\n            attributes: true\n          });\n\n          // Add modal to overlay, overlay to container (after iframe)\n          overlay.appendChild(modal);\n\n          // Append to document.body for full-screen overlay, not to container\n          document.body.appendChild(overlay);\n\n          // Also change positioning to fixed for proper full-screen behavior\n          overlay.style.position = 'fixed';\n          this.elements.lightBox = overlay;\n          this.elements.lightBoxContent = modal;\n        }\n      }, {\n        key: \"createEmojiGrid\",\n        value: function value() {\n          var t = o(\"div\", {\n              className: \"emoji-grid\",\n              styles: {\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 1fr\",\n                gridTemplateRows: \"1fr 1fr\",\n                gap: \"10px\",\n                width: \"100%\"\n              }\n            }),\n            e = o(\"div\", {\n              className: \"emoji-quadrant top-left\",\n              styles: {\n                gridRow: \"1\",\n                gridColumn: \"1\"\n              }\n            }),\n            n = o(\"div\", {\n              className: \"emoji-quadrant top-right\",\n              styles: {\n                gridRow: \"1\",\n                gridColumn: \"2\"\n              }\n            }),\n            i = o(\"div\", {\n              className: \"emoji-quadrant bottom-left\",\n              styles: {\n                gridRow: \"2\",\n                gridColumn: \"1\"\n              }\n            }),\n            a = o(\"div\", {\n              className: \"emoji-quadrant bottom-right\",\n              styles: {\n                gridRow: \"2\",\n                gridColumn: \"2\"\n              }\n            });\n          return this.createEmojiTable(e, this.config.emojis.thoughts.topLeft, \"top-left\"), this.createEmojiTable(n, this.config.emojis.thoughts.topRight, \"top-right\"), this.createEmojiTable(i, this.config.emojis.thoughts.bottomLeft, \"bottom-left\"), this.createEmojiTable(a, this.config.emojis.thoughts.bottomRight, \"bottom-right\"), t.appendChild(e), t.appendChild(n), t.appendChild(i), t.appendChild(a), t;\n        }\n      }, {\n        key: \"createEmojiTable\",\n        value: function value(t, e, n) {\n          var i = this,\n            a = o(\"div\", {\n              className: \"emoji-row\"\n            }),\n            r = o(\"div\", {\n              className: \"emoji-cell\"\n            });\n          if (e[0]) {\n            var s = o(\"div\", {\n              className: \"thought-emoji\",\n              text: e[0],\n              attributes: {\n                \"data-emoji\": e[0],\n                \"data-quadrant\": n,\n                \"data-index\": 0\n              },\n              events: {\n                click: function click(t) {\n                  i.selectEmoji(s, e[0], n, 0);\n                }\n              }\n            });\n            r.appendChild(s);\n          }\n          var l = o(\"div\", {\n            className: \"emoji-cell\"\n          });\n          if (e[1]) {\n            var d = o(\"div\", {\n              className: \"thought-emoji\",\n              text: e[1],\n              attributes: {\n                \"data-emoji\": e[1],\n                \"data-quadrant\": n,\n                \"data-index\": 1\n              },\n              events: {\n                click: function click(t) {\n                  i.selectEmoji(d, e[1], n, 1);\n                }\n              }\n            });\n            l.appendChild(d);\n          }\n          a.appendChild(r), a.appendChild(l);\n          var c = o(\"div\", {\n              className: \"emoji-row\"\n            }),\n            u = o(\"div\", {\n              className: \"emoji-cell\"\n            });\n          if (e[2]) {\n            var h = o(\"div\", {\n              className: \"thought-emoji\",\n              text: e[2],\n              attributes: {\n                \"data-emoji\": e[2],\n                \"data-quadrant\": n,\n                \"data-index\": 2\n              },\n              events: {\n                click: function click(t) {\n                  i.selectEmoji(h, e[2], n, 2);\n                }\n              }\n            });\n            u.appendChild(h);\n          }\n          var p = o(\"div\", {\n            className: \"emoji-cell\"\n          });\n          if (e[3]) {\n            var g = o(\"div\", {\n              className: \"thought-emoji\",\n              text: e[3],\n              attributes: {\n                \"data-emoji\": e[3],\n                \"data-quadrant\": n,\n                \"data-index\": 3\n              },\n              events: {\n                click: function click(t) {\n                  i.selectEmoji(g, e[3], n, 3);\n                }\n              }\n            });\n            p.appendChild(g);\n          }\n          c.appendChild(u), c.appendChild(p), t.appendChild(a), t.appendChild(c);\n        }\n      }, {\n        key: \"extractUrlFromText\",\n        value: function value(t) {\n          if (!t) return null;\n          var e = t.match(/(https?:\\/\\/[^\\s]+)/g);\n          return e && e.length > 0 ? e[0] : null;\n        }\n      }, {\n        key: \"saveEventToHistory\",\n        value: function value(t) {\n          t.timestamp = new Date().toISOString(), t.context = {\n            profileBubblePosition: this.state.profileBubblePosition,\n            currentQuadrant: this.state.currentQuadrant,\n            containerDimensions: this.state.containerDimensions\n          };\n          var e = [];\n          try {\n            var o = localStorage.getItem(\"quadTapEvents\");\n            o && (e = JSON.parse(o));\n          } catch (t) {\n            this.log(\"Error parsing stored events\", t);\n          }\n          e.push(t), localStorage.setItem(\"quadTapEvents\", JSON.stringify(e)), localStorage.setItem(\"quadTapCurrentEvent\", JSON.stringify(t)), this.log(\"Event saved to history\", t);\n        }\n      }, {\n        key: \"selectEmoji\",\n        value: function value(t, e, o, n) {\n          this.log(\"Emoji selected\", {\n            emoji: e,\n            quadrant: o,\n            index: n\n          }), this.elements.emojiGrid.querySelectorAll(\".thought-emoji\").forEach(function (t) {\n            return t.classList.remove(\"selected\");\n          }), t.classList.add(\"selected\"), r(\"selectedEmoji\", e), r(\"selectedQuadrant\", o), r(\"selectedIndex\", n), this.saveEventToHistory({\n            type: \"emoji_selected\",\n            emoji: e,\n            quadrant: o,\n            index: n\n          });\n\n          // Add the selected emoji to the comment text box\n          var commentTextarea = this.elements.commentBox && this.elements.commentBox.querySelector(\"textarea\");\n          if (commentTextarea) {\n            var currentText = commentTextarea.value || \"\";\n\n            // Always add the emoji at the beginning, preserving any existing text\n            commentTextarea.value = e + \" \" + currentText;\n\n            // Trigger change event to ensure state is updated\n            var event = new Event('input', {\n              bubbles: true\n            });\n            commentTextarea.dispatchEvent(event);\n          }\n          var i = document.querySelector(this.config.videoSelector);\n          if (i && (r(\"videoTime\", i.currentTime), r(\"videoId\", i.getAttribute(\"data-video-id\") || \"unknown\")), r(\"positionX\", this.state.profileBubblePosition.x), r(\"positionY\", this.state.profileBubblePosition.y), this.config.callbacks.onThrowDownConfirm) {\n            var a = i ? {\n              currentTime: i.currentTime,\n              videoId: i.getAttribute(\"data-video-id\") || \"unknown\",\n              duration: i.duration\n            } : null;\n            this.config.callbacks.onThrowDownConfirm(o, this.state.profileBubblePosition.x, this.state.profileBubblePosition.y, a);\n          }\n        }\n      }, {\n        key: \"saveThrowDown\",\n        value: function value() {\n          this.log(\"Saving throw-down\");\n          var t = this.elements.commentBox.querySelector(\"textarea\"),\n            e = t ? t.value : \"\",\n            o = this.extractUrlFromText(e);\n          r(\"comment\", e), o && r(\"extractedUrl\", o), r(\"timestamp\", Date.now());\n          var n = document.querySelector(this.config.videoSelector),\n            i = {};\n          n && (Array.from(n.attributes).filter(function (t) {\n            return t.name.startsWith(\"data-\");\n          }).forEach(function (t) {\n            var e = t.name.replace(\"data-\", \"\");\n            i[e] = t.value;\n          }), i.duration = n.duration || 0, i.currentTime = n.currentTime || 0, i.paused = n.paused, i.muted = n.muted, i.volume = n.volume, i.playbackRate = n.playbackRate, i.videoWidth = n.videoWidth, i.videoHeight = n.videoHeight, i.src = n.currentSrc || n.src);\n          var a = {\n            selectedEmoji: s(\"selectedEmoji\", \"\"),\n            selectedQuadrant: s(\"selectedQuadrant\", \"\"),\n            selectedIndex: s(\"selectedIndex\", -1),\n            comment: e,\n            extractedUrl: o || s(\"extractedUrl\", \"\"),\n            positionX: this.state.profileBubblePosition.x,\n            positionY: this.state.profileBubblePosition.y,\n            quadrant: this.state.currentQuadrant,\n            videoId: s(\"videoId\", n && n.getAttribute(\"data-video-id\") || \"unknown\"),\n            videoTime: s(\"videoTime\", n ? n.currentTime : 0),\n            videoMetadata: i,\n            containerId: this.config.containerId,\n            containerWidth: this.state.containerDimensions.width,\n            containerHeight: this.state.containerDimensions.height,\n            timestamp: Date.now(),\n            timezoneOffset: new Date().getTimezoneOffset(),\n            locale: navigator.language || \"en-US\",\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            url: window.location.href,\n            referrer: document.referrer,\n            title: document.title\n          };\n          !function (t) {\n            try {\n              for (var e in t) r(e, t[e]);\n              return r(\"timestamp\", Date.now()), !0;\n            } catch (t) {\n              return console.error(\"[QuadTap] Error saving throw-down context:\", t), !1;\n            }\n          }(a), this.closeLightBox(), this.log(\"Throw-down saved\", a);\n        }\n      }, {\n        key: \"bindEventHandlers\",\n        value: function value() {\n          var t = this;\n          this.elements.video = document.querySelector(this.config.videoSelector);\n\n          // Detect mobile devices simply\n          var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || window.innerWidth < 768;\n\n          // If on mobile, prevent native fullscreen\n          if (isMobile && this.elements.video) {\n            // Prevent native fullscreen on iOS/Safari\n            this.elements.video.addEventListener('webkitbeginfullscreen', function (e) {\n              if (e.preventDefault) e.preventDefault();\n              return false;\n            });\n\n            // Disable native fullscreen attributes\n            this.elements.video.setAttribute('playsinline', '');\n            this.elements.video.setAttribute('webkit-playsinline', '');\n\n            // ADDED: Disable native video controls\n            this.elements.video.removeAttribute('controls');\n            // For some players that might override this, try to force it\n            this.elements.video.controls = false;\n\n            // Find and disable any fullscreen buttons in the video player\n            setTimeout(function () {\n              try {\n                // Find common fullscreen button selectors\n                var fullscreenButtons = document.querySelectorAll('.vjs-fullscreen-control, .fullscreen-button, [data-fullscreen], .ytp-fullscreen-button');\n                fullscreenButtons.forEach(function (btn) {\n                  // Either hide or disable the button\n                  if (btn.style) {\n                    btn.style.display = 'none';\n                  }\n                  // Add click interceptor\n                  btn.addEventListener('click', function (e) {\n                    if (e.preventDefault) e.preventDefault();\n                    e.stopPropagation();\n                    return false;\n                  });\n                });\n              } catch (err) {\n                t.log(\"Error disabling fullscreen buttons\", err);\n              }\n            }, 500); // Delay to ensure video player is fully initialized\n          }\n\n          // Long press variables\n          var longPressTimer = null;\n          var longPressDuration = 300; // milliseconds - reduced from 500 to make it more responsive\n          var longPressStartPosition = {\n            x: 0,\n            y: 0\n          };\n\n          // Long press handler - triggered after timeout\n          var handleLongPress = function handleLongPress(position) {\n            t.log(\"Long press detected\", position);\n\n            // Update bubble position based on the long press position\n            var i = position.x / t.state.containerDimensions.width;\n            var a = position.y / t.state.containerDimensions.height;\n            t.state.profileBubblePosition = {\n              x: i,\n              y: a\n            };\n\n            // Store the quadrant\n            t.state.currentQuadrant = t.getQuadrantFromPosition(position.x, position.y);\n\n            // Save position in localStorage just like a normal tap would\n            r(\"positionX\", i);\n            r(\"positionY\", a);\n\n            // Create an event object\n            var longPressEvent = {\n              type: \"long_press\",\n              positionX: position.x,\n              positionY: position.y,\n              quadrant: t.state.currentQuadrant,\n              containerWidth: t.state.containerDimensions.width,\n              containerHeight: t.state.containerDimensions.height\n            };\n\n            // Save event to local storage\n            t.saveEventToHistory(longPressEvent);\n\n            // Display in lightbox directly (skip the overlay)\n            t.openLightBox();\n          };\n\n          // Add method to get quadrant from position\n          this.getQuadrantFromPosition = function (x, y) {\n            var width = this.state.containerDimensions.width;\n            var height = this.state.containerDimensions.height;\n            var quadrant = \"\";\n            if (y < height / 2) {\n              quadrant += \"top-\";\n            } else {\n              quadrant += \"bottom-\";\n            }\n            if (x < width / 2) {\n              quadrant += \"left\";\n            } else {\n              quadrant += \"right\";\n            }\n            return quadrant;\n          };\n\n          // Touch start event for long press detection\n          var handleTouchStart = function handleTouchStart(e) {\n            if (e.touches && e.touches.length === 1) {\n              var touch = e.touches[0];\n              var rect = t.elements.container.getBoundingClientRect();\n              var x = touch.clientX - rect.left;\n              var y = touch.clientY - rect.top;\n              longPressStartPosition = {\n                x: x,\n                y: y\n              };\n\n              // Clear any existing timeout\n              if (longPressTimer) clearTimeout(longPressTimer);\n\n              // Set new timeout for long press\n              longPressTimer = setTimeout(function () {\n                handleLongPress(longPressStartPosition);\n              }, longPressDuration);\n            }\n          };\n\n          // Touch move event to cancel long press if moved\n          var handleTouchMove = function handleTouchMove(e) {\n            if (longPressTimer) {\n              // If moving beyond a small threshold, cancel the long press\n              if (e.touches && e.touches.length === 1) {\n                var touch = e.touches[0];\n                var rect = t.elements.container.getBoundingClientRect();\n                var x = touch.clientX - rect.left;\n                var y = touch.clientY - rect.top;\n\n                // Calculate distance moved\n                var dx = x - longPressStartPosition.x;\n                var dy = y - longPressStartPosition.y;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n\n                // If moved more than 10 pixels, cancel long press\n                if (distance > 10) {\n                  clearTimeout(longPressTimer);\n                  longPressTimer = null;\n                }\n              }\n            }\n          };\n\n          // Touch end/cancel event to clear the long press timer\n          var handleTouchEnd = function handleTouchEnd() {\n            if (longPressTimer) {\n              clearTimeout(longPressTimer);\n              longPressTimer = null;\n            }\n          };\n\n          // Add touch event listeners for long press detection\n          this.elements.container.addEventListener('touchstart', handleTouchStart, {\n            passive: false\n          });\n          this.elements.container.addEventListener('touchmove', handleTouchMove, {\n            passive: false\n          });\n          this.elements.container.addEventListener('touchend', handleTouchEnd, {\n            passive: false\n          });\n          this.elements.container.addEventListener('touchcancel', handleTouchEnd, {\n            passive: false\n          });\n          var e = function e(_e) {\n            if (_e.preventDefault(), _e.stopPropagation(), !_e.target.closest(\".video-control-button\")) if (t.state.active) _e.target === t.elements.profileBubble || t.elements.profileBubble.contains(_e.target) ? t.openLightBox() : t.deactivateOverlay();else {\n              var o,\n                n,\n                i = t.elements.container.getBoundingClientRect();\n              if (\"touchstart\" === _e.type || \"touchend\" === _e.type) {\n                var a = _e.changedTouches[0];\n                o = a.clientX - i.left, n = a.clientY - i.top;\n              } else o = _e.clientX - i.left, n = _e.clientY - i.top;\n              t.activateOverlay(o, n);\n            }\n          };\n          this.elements.container.addEventListener(\"click\", e), this.elements.container.addEventListener(\"touchend\", e);\n          var o = function o(e) {\n            t.state.active && (t.openLightBox(), e.stopPropagation());\n          };\n          this.elements.profileBubble.addEventListener(\"click\", o), this.elements.profileBubble.addEventListener(\"touchend\", function (e) {\n            // Prevent default touch behavior to avoid any issues with touch events\n            e.preventDefault();\n            // Call the original handler\n            o(e);\n          });\n          var n = function n(e) {\n            e.target === t.elements.lightBox && t.closeLightBox();\n          };\n          this.elements.lightBox.addEventListener(\"click\", n), this.elements.lightBox.addEventListener(\"touchend\", n), document.addEventListener(\"keydown\", function (e) {\n            \"Escape\" === e.key && (t.elements.lightBox.classList.contains(\"active\") ? t.closeLightBox() : t.state.active && t.deactivateOverlay());\n          }), this.elements.video && (this.elements.video.addEventListener(\"play\", function () {\n            t.state.videoPlaying = !0;\n          }), this.elements.video.addEventListener(\"pause\", function () {\n            t.state.videoPlaying = !1;\n          })), window.addEventListener(\"resize\", this.throttledResize), this.updateContainerDimensions();\n\n          // Add swipe detection\n          this.addSwipeHandlers();\n        }\n      }, {\n        key: \"addSwipeHandlers\",\n        value: function value() {\n          var t = this;\n\n          // Initialize swipe state\n          this.state.swipe = {\n            startX: 0,\n            startY: 0,\n            endX: 0,\n            endY: 0,\n            startTime: 0,\n            onVideo: false,\n            overlayActive: false,\n            threshold: 50,\n            // Min distance to be considered a swipe\n            maxTime: 500 // Max time in ms for a gesture to be considered a swipe\n          };\n\n          // Common handler for both desktop and mobile\n          var handleSwipeStart = function handleSwipeStart(e) {\n            var clientX, clientY, targetElement;\n            if (e.type.includes('touch')) {\n              clientX = e.touches[0].clientX;\n              clientY = e.touches[0].clientY;\n              targetElement = document.elementFromPoint(clientX, clientY);\n            } else {\n              clientX = e.clientX;\n              clientY = e.clientY;\n              targetElement = e.target;\n            }\n            t.state.swipe.startX = clientX;\n            t.state.swipe.startY = clientY;\n            t.state.swipe.startTime = Date.now();\n            t.state.swipe.onVideo = targetElement === t.elements.video;\n            t.state.swipe.overlayActive = t.state.active;\n            t.log(\"Swipe start\", {\n              x: clientX,\n              y: clientY,\n              onVideo: t.state.swipe.onVideo,\n              overlayActive: t.state.swipe.overlayActive\n            });\n          };\n          var handleSwipeEnd = function handleSwipeEnd(e) {\n            var clientX, clientY;\n\n            // Skip processing if already handling a swipe\n            if (t.state.swipeProcessing) {\n              t.log(\"Ignoring swipe end during active processing\");\n              return;\n            }\n\n            // If no start position recorded, this isn't a valid swipe\n            if (t.state.swipe.startX === 0 && t.state.swipe.startY === 0) {\n              return;\n            }\n            if (e.type.includes('touch')) {\n              clientX = e.changedTouches[0].clientX;\n              clientY = e.changedTouches[0].clientY;\n            } else {\n              clientX = e.clientX;\n              clientY = e.clientY;\n            }\n            t.state.swipe.endX = clientX;\n            t.state.swipe.endY = clientY;\n            var deltaX = t.state.swipe.endX - t.state.swipe.startX;\n            var deltaY = t.state.swipe.endY - t.state.swipe.startY;\n            var elapsedTime = Date.now() - t.state.swipe.startTime;\n\n            // Reset start position to prevent duplicate processing\n            t.state.swipe.startX = 0;\n            t.state.swipe.startY = 0;\n            if (elapsedTime <= t.state.swipe.maxTime) {\n              var swipeDirection = \"\";\n              var absX = Math.abs(deltaX);\n              var absY = Math.abs(deltaY);\n\n              // Determine swipe direction if threshold is met\n              if (Math.max(absX, absY) >= t.state.swipe.threshold) {\n                if (absX > absY) {\n                  swipeDirection = deltaX > 0 ? \"right\" : \"left\";\n                } else {\n                  swipeDirection = deltaY > 0 ? \"down\" : \"up\";\n                }\n                t.log(\"Swipe detected\", {\n                  direction: swipeDirection,\n                  onVideo: t.state.swipe.onVideo,\n                  overlayActive: t.state.swipe.overlayActive,\n                  deltaX: deltaX,\n                  deltaY: deltaY,\n                  time: elapsedTime\n                });\n\n                // Handle the swipe by opening lightbox with swipe info\n                t.handleSwipe(swipeDirection);\n              }\n            }\n          };\n          var handleSwipeMove = function handleSwipeMove(e) {\n            // Optional: track movement for more complex gestures\n            // For now we just prevent default to avoid scrolling\n            if (e.cancelable) e.preventDefault();\n          };\n\n          // Add mouse events for desktop\n          this.elements.container.addEventListener('mousedown', handleSwipeStart);\n          document.addEventListener('mouseup', handleSwipeEnd);\n          document.addEventListener('mousemove', function (e) {\n            // Only track movement if mouse is down (potential swipe in progress)\n            if (e.buttons === 1) handleSwipeMove(e);\n          });\n\n          // Add touch events for mobile\n          this.elements.container.addEventListener('touchstart', handleSwipeStart, {\n            passive: false\n          });\n          this.elements.container.addEventListener('touchend', handleSwipeEnd);\n          this.elements.container.addEventListener('touchmove', handleSwipeMove, {\n            passive: false\n          });\n        }\n      }, {\n        key: \"handleSwipe\",\n        value: function value(direction) {\n          var _this = this;\n          // More aggressive debounce to prevent multiple calls\n          if (this.state.swipeProcessing) {\n            this.log(\"Ignoring swipe during active processing\", direction);\n            return; // Exit if a swipe is already being processed\n          }\n\n          // Set processing flag immediately\n          this.state.swipeProcessing = true;\n\n          // Clear any existing debounce timer\n          if (this.state.swipeDebounceTimer) {\n            clearTimeout(this.state.swipeDebounceTimer);\n          }\n\n          // Create swipe info text to display in the lightbox\n          var swipeInfo = \"Swipe: \" + direction.toUpperCase() + \"\\nOverlay: \" + (this.state.swipe.overlayActive ? \"ACTIVE\" : \"INACTIVE\") + \"\\nOn Video: \" + (this.state.swipe.onVideo ? \"YES\" : \"NO\");\n\n          // Store swipe info for the lightbox to access\n          this.state.swipeInfo = swipeInfo;\n\n          // If lightbox is already open, update the content\n          if (this.elements.lightBox && this.elements.lightBox.classList.contains('active')) {\n            this.updateLightboxSwipeInfo(swipeInfo);\n          } else {\n            // Open the lightbox which will display swipe info\n            this.openLightBoxWithSwipeInfo(swipeInfo);\n          }\n\n          // Set debounce timer to reset processing flag\n          this.state.swipeDebounceTimer = setTimeout(function () {\n            _this.state.swipeProcessing = false;\n            _this.state.swipeDebounceTimer = null;\n          }, 500); // Longer debounce time: 500ms\n        }\n      }, {\n        key: \"updateLightboxSwipeInfo\",\n        value: function value(swipeInfo) {\n          // Update existing lightbox with swipe info\n          if (this.elements.lightBoxContent) {\n            // Find or create swipe info container\n            var swipeInfoElement = this.elements.lightBoxContent.querySelector('.swipe-info');\n            if (!swipeInfoElement) {\n              swipeInfoElement = document.createElement('div');\n              swipeInfoElement.className = 'swipe-info';\n              swipeInfoElement.style.padding = '10px';\n              swipeInfoElement.style.marginTop = '15px';\n              swipeInfoElement.style.backgroundColor = 'rgba(0,0,0,0.1)';\n              swipeInfoElement.style.borderRadius = '5px';\n              swipeInfoElement.style.fontFamily = 'monospace';\n              swipeInfoElement.style.whiteSpace = 'pre';\n              this.elements.lightBoxContent.appendChild(swipeInfoElement);\n            }\n            swipeInfoElement.textContent = swipeInfo;\n          }\n        }\n      }, {\n        key: \"openLightBoxWithSwipeInfo\",\n        value: function value(swipeInfo) {\n          var t = this;\n\n          // First open the normal lightbox\n          this.openLightBox();\n\n          // Then add or update swipe info\n          setTimeout(function () {\n            t.updateLightboxSwipeInfo(swipeInfo);\n          }, 100);\n        }\n      }, {\n        key: \"handleResize\",\n        value: function value() {\n          if (this.state.active) {\n            this.updateContainerDimensions();\n            var t = this.state.containerDimensions.width * this.state.profileBubblePosition.x,\n              e = this.state.containerDimensions.height * this.state.profileBubblePosition.y;\n            n(this.elements.profileBubble, t, e), this.positionDirectionalEmojis(t, e), this.positionQuadrantEmojis(), this.positionVideoControls(), this.positionTooltip();\n          }\n\n          // If lightbox is active, recalculate its max-height and max-width on resize\n          if (this.elements.lightBox && this.elements.lightBox.classList.contains('active') && this.elements.lightBoxContent) {\n            var viewportWidth = window.innerWidth;\n            var viewportHeight = window.innerHeight;\n\n            // Calculate max dimensions - use larger dimensions for better video accommodation\n            var maxWidth = Math.min(viewportWidth * 0.9, viewportWidth < 768 ? 700 : 1200);\n            var maxHeight = viewportHeight * 0.9;\n\n            // Apply responsive styles\n            this.elements.lightBoxContent.style.maxWidth = maxWidth + 'px';\n            this.elements.lightBoxContent.style.maxHeight = maxHeight + 'px';\n\n            // Adjust top bezel and alignment for mobile\n            if (viewportWidth < 768) {\n              this.elements.lightBox.style.paddingTop = '5vh';\n              this.elements.lightBox.style.alignItems = 'flex-start';\n            } else {\n              this.elements.lightBox.style.paddingTop = '0';\n              this.elements.lightBox.style.alignItems = 'center';\n            }\n            if (this.config.debug) {\n              this.log(\"Window resized, updated lightbox dimensions\", {\n                viewport: {\n                  width: viewportWidth,\n                  height: viewportHeight\n                },\n                lightbox: {\n                  maxWidth: maxWidth,\n                  maxHeight: maxHeight\n                }\n              });\n            }\n          }\n        }\n      }, {\n        key: \"updateContainerDimensions\",\n        value: function value() {\n          if (this.elements.container) {\n            var t = this.elements.container.getBoundingClientRect();\n            this.state.containerDimensions = {\n              width: t.width,\n              height: t.height\n            };\n          }\n        }\n      }, {\n        key: \"activateOverlay\",\n        value: function value(t, e) {\n          var o = this;\n          this.log(\"Activating overlay\", {\n            x: t,\n            y: e\n          });\n          var i = t / this.state.containerDimensions.width,\n            a = e / this.state.containerDimensions.height;\n          this.state.profileBubblePosition = {\n            x: i,\n            y: a\n          }, this.state.currentQuadrant = function (t, e, o) {\n            var n = o.getBoundingClientRect(),\n              i = n.width / 2,\n              a = n.height / 2;\n            return t < i ? e < a ? \"top-left\" : \"bottom-left\" : e < a ? \"top-right\" : \"bottom-right\";\n          }(t, e, this.elements.container), this.log(\"Current quadrant\", this.state.currentQuadrant), this.elements.overlay.style.display = \"block\", setTimeout(function () {\n            o.elements.overlay.classList.add(\"active\");\n          }, 10), this.elements.profileBubble.style.display = \"flex\";\n\n          // Apply responsive bubble size\n          var bubbleDimensions = this.calculateResponsiveBubbleSize();\n          this.elements.profileBubble.style.width = bubbleDimensions.width;\n          this.elements.profileBubble.style.height = bubbleDimensions.height;\n          var r = this.state.containerDimensions.width * this.state.profileBubblePosition.x,\n            s = this.state.containerDimensions.height * this.state.profileBubblePosition.y;\n          n(this.elements.profileBubble, r, s), this.positionDirectionalEmojis(t, e), this.positionQuadrantEmojis(), this.positionVideoControls(), this.positionTooltip(), this.state.active = !0, this.config.autoCancelTimeout > 0 && (this.state.autoCancelTimer = setTimeout(function () {\n            o.deactivateOverlay();\n          }, this.config.autoCancelTimeout)), this.config.callbacks.onOverlayActivate && this.config.callbacks.onOverlayActivate(t, e);\n        }\n      }, {\n        key: \"positionDirectionalEmojis\",\n        value: function value(t, e) {\n          var o = this.state.containerDimensions,\n            n = o.width,\n            i = o.height,\n            a = e,\n            r = n - t,\n            s = i - e,\n            l = t,\n            d = n / 2,\n            c = .1 * i,\n            u = .9 * n,\n            h = i / 2,\n            p = n / 2,\n            g = .9 * i,\n            m = .1 * n,\n            f = i / 2,\n            b = Math.sqrt(Math.pow(t - d, 2) + Math.pow(e - c, 2)),\n            v = Math.sqrt(Math.pow(t - u, 2) + Math.pow(e - h, 2)),\n            y = Math.sqrt(Math.pow(t - p, 2) + Math.pow(e - g, 2)),\n            w = Math.sqrt(Math.pow(t - m, 2) + Math.pow(e - f, 2)),\n            x = Math.sqrt(Math.pow(n, 2) + Math.pow(i, 2)),\n            C = .8 + Math.max(0, 1.2 * (1 - b / x)) + Math.max(0, .8 * (1 - a / (i / 2))),\n            j = .8 + Math.max(0, 1.2 * (1 - v / x)) + Math.max(0, .8 * (1 - r / (n / 2))),\n            k = .8 + Math.max(0, 1.2 * (1 - y / x)) + Math.max(0, .8 * (1 - s / (i / 2))),\n            S = .8 + Math.max(0, 1.2 * (1 - w / x)) + Math.max(0, .8 * (1 - l / (n / 2))),\n            T = this.elements.directionalEmojis.up;\n          T.style.display = \"block\", T.style.position = \"absolute\", T.style.top = \"10%\", T.style.left = \"50%\", T.style.transform = \"translate(-50%, 0) scale(\".concat(C, \")\"), T.style.fontSize = \"2rem\", T.style.opacity = \"0.8\";\n          var B = this.elements.directionalEmojis.right;\n          B.style.display = \"block\", B.style.position = \"absolute\", B.style.top = \"50%\", B.style.right = \"10%\", B.style.transform = \"translate(0, -50%) scale(\".concat(j, \")\"), B.style.fontSize = \"2rem\", B.style.opacity = \"0.8\";\n          var E = this.elements.directionalEmojis.down;\n          E.style.display = \"block\", E.style.position = \"absolute\", E.style.bottom = \"10%\", E.style.left = \"50%\", E.style.transform = \"translate(-50%, 0) scale(\".concat(k, \")\"), E.style.fontSize = \"2rem\", E.style.opacity = \"0.8\";\n          var q = this.elements.directionalEmojis.left;\n          q.style.display = \"block\", q.style.position = \"absolute\", q.style.top = \"50%\", q.style.left = \"10%\", q.style.transform = \"translate(0, -50%) scale(\".concat(S, \")\"), q.style.fontSize = \"2rem\", q.style.opacity = \"0.8\";\n        }\n      }, {\n        key: \"calculateResponsiveEmojiSize\",\n        value: function value() {\n          var t,\n            e,\n            o = this.state.containerDimensions,\n            n = o.width,\n            i = o.height;\n\n          // Check if we're on a mobile device\n          var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || window.innerWidth < 768;\n\n          // Check orientation - true if portrait (height > width)\n          var isPortrait = i > n;\n\n          // Base emoji size on width rather than the minimum dimension\n          // This ensures emojis are properly sized when orientation changes\n          var widthBasedSize;\n          if (n < 200) {\n            widthBasedSize = 0.3; // Very small screens (was 0.4)\n          } else if (n < 300) {\n            widthBasedSize = 0.4; // Small screens (was 0.5)\n          } else if (n < 400) {\n            widthBasedSize = 0.5; // Medium-small screens (was 0.6)\n          } else if (n < 600) {\n            widthBasedSize = 0.6; // Medium screens (was 0.7)\n          } else if (n < 800) {\n            widthBasedSize = 0.7; // Medium-large screens (was 0.8)\n          } else {\n            widthBasedSize = 0.8; // Large screens (was 0.9)\n          }\n\n          // Adjust size based on orientation\n          if (isPortrait && isMobile) {\n            // In portrait mode on mobile, make emojis smaller relative to width\n            widthBasedSize *= 0.75; // Reduced from 0.85 to 0.75\n          }\n\n          // Calculate final sizes\n          t = widthBasedSize + \"rem\";\n          e = widthBasedSize * 1.4 + \"rem\";\n\n          // Log sizes if debug is enabled\n          if (this.config.debug) {\n            console.log(\"[QuadTap] Responsive emoji sizes:\", {\n              width: n,\n              height: i,\n              isPortrait: isPortrait,\n              isMobile: isMobile,\n              defaultSize: t,\n              enlargedSize: e\n            });\n          }\n          return {\n            defaultSize: t,\n            enlargedSize: e,\n            defaultOpacity: \"0.6\",\n            enlargedOpacity: \"0.8\"\n          };\n        }\n      }, {\n        key: \"calculateResponsiveBubbleSize\",\n        value: function value() {\n          // Get container dimensions\n          var containerWidth = this.state.containerDimensions.width;\n          var containerHeight = this.state.containerDimensions.height;\n\n          // Check if we're on a mobile device\n          var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || window.innerWidth < 768;\n\n          // Check orientation - true if portrait (height > width)\n          var isPortrait = containerHeight > containerWidth;\n\n          // Base bubble size on width rather than minimum dimension\n          // This ensures consistent sizing when orientation changes\n          var bubbleSize;\n\n          // Size based on width percentage\n          var widthPercentage = isMobile ? 0.12 : 0.10; // 12% of width on mobile, 10% on desktop\n          bubbleSize = Math.round(containerWidth * widthPercentage);\n\n          // Apply min/max constraints\n          bubbleSize = Math.max(30, bubbleSize); // Minimum size\n          bubbleSize = Math.min(70, bubbleSize); // Maximum size\n\n          // Adjust for portrait orientation on mobile\n          if (isPortrait && isMobile) {\n            // In portrait mode, make bubble slightly smaller\n            bubbleSize = Math.floor(bubbleSize * 0.9);\n          }\n\n          // Log size if debug is enabled\n          if (this.config.debug) {\n            console.log(\"[QuadTap] Responsive bubble size:\", {\n              width: containerWidth,\n              height: containerHeight,\n              isPortrait: isPortrait,\n              isMobile: isMobile,\n              bubbleSize: bubbleSize\n            });\n          }\n          return {\n            width: bubbleSize + 'px',\n            height: bubbleSize + 'px'\n          };\n        }\n      }, {\n        key: \"positionQuadrantEmojis\",\n        value: function value() {\n          var t = this.calculateResponsiveEmojiSize(),\n            e = t.defaultSize,\n            o = t.enlargedSize,\n            n = t.defaultOpacity,\n            i = t.enlargedOpacity;\n\n          // Check if we're on a mobile device\n          var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || window.innerWidth < 768;\n\n          // Use smaller corner spacing on mobile\n          var cornerSpacing = isMobile ? \"3%\" : \"4%\";\n          var a = this.elements.quadrantEmojis.topLeft;\n          a.style.display = \"block\", a.style.position = \"absolute\", a.style.top = cornerSpacing, a.style.left = cornerSpacing, a.style.transform = \"translate(-50%, -50%)\", a.style.fontSize = e, a.style.opacity = n;\n          var r = this.elements.quadrantEmojis.topRight;\n          r.style.display = \"block\", r.style.position = \"absolute\", r.style.top = cornerSpacing, r.style.right = cornerSpacing, r.style.transform = \"translate(50%, -50%)\", r.style.fontSize = e, r.style.opacity = n;\n          var s = this.elements.quadrantEmojis.bottomLeft;\n          s.style.display = \"block\", s.style.position = \"absolute\", s.style.bottom = cornerSpacing, s.style.left = cornerSpacing, s.style.transform = \"translate(-50%, 50%)\", s.style.fontSize = e, s.style.opacity = n;\n          var l = this.elements.quadrantEmojis.bottomRight;\n          if (l.style.display = \"block\", l.style.position = \"absolute\", l.style.bottom = cornerSpacing, l.style.right = cornerSpacing, l.style.transform = \"translate(50%, 50%)\", l.style.fontSize = e, l.style.opacity = n, this.state.currentQuadrant) switch (this.state.currentQuadrant) {\n            case \"top-left\":\n              a.style.fontSize = o, a.style.opacity = i;\n              break;\n            case \"top-right\":\n              r.style.fontSize = o, r.style.opacity = i;\n              break;\n            case \"bottom-left\":\n              s.style.fontSize = o, s.style.opacity = i;\n              break;\n            case \"bottom-right\":\n              l.style.fontSize = o, l.style.opacity = i;\n          }\n        }\n      }, {\n        key: \"positionVideoControls\",\n        value: function value() {\n          if (this.config.videoControls.enabled) {\n            var t = this.elements.videoControls;\n            t.style.display = \"flex\", t.style.position = \"absolute\", t.style.top = \"50%\", t.style.left = \"50%\", t.style.transform = \"translate(-50%, -50%)\", t.style.zIndex = \"1001\";\n          }\n        }\n      }, {\n        key: \"positionTooltip\",\n        value: function value() {\n          if (this.config.tooltip && !1 !== this.config.tooltip.enabled) {\n            var t = this.elements.tooltip;\n            switch (t.style.display = \"block\", t.style.position = \"absolute\", t.style.zIndex = \"1001\", this.config.tooltip.text && (t.textContent = this.config.tooltip.text), this.config.tooltip.position || \"above-controls\") {\n              case \"above-controls\":\n              default:\n                t.style.top = \"40%\", t.style.left = \"50%\", t.style.transform = \"translate(-50%, -50%)\";\n                break;\n              case \"below-controls\":\n                t.style.top = \"60%\", t.style.left = \"50%\", t.style.transform = \"translate(-50%, -50%)\";\n                break;\n              case \"on-bubble\":\n                var e = this.elements.profileBubble.getBoundingClientRect(),\n                  o = this.elements.overlay.getBoundingClientRect(),\n                  n = (e.top - o.top) / o.height * 100;\n                t.style.top = \"\".concat(n - 10, \"%\"), t.style.left = \"50%\", t.style.transform = \"translate(-50%, -100%)\";\n            }\n            if (this.config.tooltip.style) {\n              var i = this.config.tooltip.style;\n              i.backgroundColor && (t.style.backgroundColor = i.backgroundColor), i.color && (t.style.color = i.color), i.padding && (t.style.padding = i.padding), i.borderRadius && (t.style.borderRadius = i.borderRadius);\n            } else t.style.textAlign = \"center\", t.style.backgroundColor = \"rgba(0, 0, 0, 0.7)\", t.style.color = \"white\", t.style.padding = \"8px 12px\", t.style.borderRadius = \"4px\";\n          }\n        }\n      }, {\n        key: \"controlVideo\",\n        value: function value(t) {\n          this.log(\"Controlling video\", t);\n          var e = document.querySelector(this.config.videoSelector);\n          if (e) {\n            switch (t) {\n              case \"rewind\":\n                e.currentTime = Math.max(0, e.currentTime - this.config.videoControls.rewindTime);\n                break;\n              case \"playpause\":\n                e.paused ? e.play() : e.pause();\n                break;\n              case \"forward\":\n                e.currentTime = Math.min(e.duration, e.currentTime + this.config.videoControls.forwardTime);\n                break;\n              case \"share\":\n                navigator.share ? navigator.share({\n                  title: \"Shared Video\",\n                  text: \"Check out this video!\",\n                  url: window.location.href\n                })[\"catch\"](function (t) {\n                  console.error(\"Share failed:\", t);\n                }) : alert(\"Share feature not supported by your browser\");\n            }\n            this.config.callbacks.onVideoControl && this.config.callbacks.onVideoControl(t, e.currentTime);\n          } else this.log(\"Video element not found\");\n        }\n      }, {\n        key: \"deactivateOverlay\",\n        value: function value() {\n          var t = this;\n          this.log(\"Deactivating overlay\"), this.elements.overlay.classList.remove(\"active\"), setTimeout(function () {\n            t.state.active || (t.elements.overlay.style.display = \"none\", t.elements.profileBubble.style.display = \"none\", Object.values(t.elements.directionalEmojis).forEach(function (t) {\n              t.style.display = \"none\";\n            }), Object.values(t.elements.quadrantEmojis).forEach(function (t) {\n              t.style.display = \"none\";\n            }), t.elements.videoControls.style.display = \"none\", t.elements.tooltip.style.display = \"none\");\n          }, 300), this.state.active = !1, this.state.autoCancelTimer && (clearTimeout(this.state.autoCancelTimer), this.state.autoCancelTimer = null), this.config.callbacks.onThrowDownCancel && this.config.callbacks.onThrowDownCancel(this.state.currentQuadrant), this.log(\"Overlay deactivated\");\n        }\n      }, {\n        key: \"createVideoTimeSlider\",\n        value: function value() {\n          return o(\"div\", {\n            styles: {\n              display: \"none\"\n            }\n          });\n        }\n      }, {\n        key: \"openLightBox\",\n        value: function value() {\n          var t = this;\n          this.log(\"Opening light-box\"), this.elements.lightBox.classList.add(\"active\"), this.state.autoCancelTimer && (clearTimeout(this.state.autoCancelTimer), this.state.autoCancelTimer = null);\n\n          // ADDED: Calculate dynamic dimensions for responsive lightbox\n          var viewportWidth = window.innerWidth;\n          var viewportHeight = window.innerHeight;\n\n          // Adjust lightbox content size based on viewport\n          if (this.elements.lightBoxContent) {\n            // Apply white background\n            this.elements.lightBoxContent.style.backgroundColor = \"#ffffff\";\n\n            // Calculate max dimensions - use larger dimensions for better video accommodation\n            var maxWidth = Math.min(viewportWidth * 0.9, viewportWidth < 768 ? 700 : 1200);\n            var maxHeight = viewportHeight * 0.9;\n\n            // Apply responsive styles\n            this.elements.lightBoxContent.style.maxWidth = maxWidth + 'px';\n            this.elements.lightBoxContent.style.maxHeight = maxHeight + 'px';\n\n            // Adjust top bezel and alignment for mobile\n            if (viewportWidth < 768) {\n              this.elements.lightBox.style.paddingTop = '5vh';\n              this.elements.lightBox.style.alignItems = 'flex-start';\n            } else {\n              this.elements.lightBox.style.paddingTop = '0';\n              this.elements.lightBox.style.alignItems = 'center';\n            }\n            this.log(\"Responsive lightbox dimensions set\", {\n              viewport: {\n                width: viewportWidth,\n                height: viewportHeight\n              },\n              lightbox: {\n                maxWidth: maxWidth,\n                maxHeight: maxHeight\n              }\n            });\n          }\n          var e = this.config.videoPlayerApi && this.config.videoPlayerApi.enabled && this.config.videoPlayerApi.adapter;\n          if (this.state.wasPlayingBefore = !!e && e.isPlaying(), !e) {\n            var o = document.querySelector(this.config.videoSelector);\n            this.state.wasPlayingBefore = !!o && !o.paused;\n          }\n          if (this.elements.videoSliderContainer || (this.elements.videoSliderContainer = this.createVideoTimeSlider(), this.elements.lightboxControlStrip && this.elements.lightboxControlStrip.parentNode && this.elements.lightboxControlStrip.parentNode.insertBefore(this.elements.videoSliderContainer, this.elements.lightboxControlStrip)), this.elements.lightboxControlStripObj && this.config.videoControls.enabled) {\n            this.elements.lightboxControlStrip && (this.elements.lightboxControlStrip.style.display = \"flex\");\n            var n = document.querySelector(this.config.videoSelector);\n            if (n) try {\n              this.elements.lightboxControlStripObj.updatePlayPauseButton ? this.elements.lightboxControlStripObj.updatePlayPauseButton(!n.paused) : j(this.elements.lightboxControlStrip, !n.paused);\n            } catch (t) {\n              this.log(\"Error updating play/pause button\", t);\n            }\n          }\n          if (this.updateVideoTimeDisplay(), this.videoTimeUpdateInterval = setInterval(function () {\n            t.updateVideoTimeDisplay();\n          }, 1e3), function (t) {\n            p.apply(this, arguments);\n          }(this), this.elements.videoControls && this.elements.videoControlsObj) try {\n            this.elements.videoControlsObj.updatePlayPauseButton ? this.elements.videoControlsObj.updatePlayPauseButton(!1) : j(this.elements.videoControls, !1);\n          } catch (t) {\n            this.log(\"Error updating play/pause button\", t);\n          }\n          this.config.callbacks.onThrowDownInitiate && this.config.callbacks.onThrowDownInitiate(this.state.currentQuadrant, this.state.profileBubblePosition.x, this.state.profileBubblePosition.y);\n\n          // Update position display if it exists\n          if (this.elements.positionInputX && this.elements.positionInputY) {\n            var xPos = this.state.profileBubblePosition.x;\n            var yPos = this.state.profileBubblePosition.y;\n\n            // If values are not available in state, try to get from localStorage\n            if (typeof xPos !== 'number' || typeof yPos !== 'number') {\n              var storedPos = s('positionX');\n              var storedPosY = s('positionY');\n              if (storedPos !== null) xPos = parseFloat(storedPos);\n              if (storedPosY !== null) yPos = parseFloat(storedPosY);\n            }\n\n            // Default to 50% if still no valid values\n            if (typeof xPos !== 'number') xPos = 0.5;\n            if (typeof yPos !== 'number') yPos = 0.5;\n\n            // Calculate percentages, inverting y-value so \"up\" is positive\n            var xPercent = Math.round(xPos * 100 * 100) / 100;\n            var yPercentUp = Math.round((1 - yPos) * 100 * 100) / 100; // Invert y so up is positive\n\n            // Update input values if inputs exist\n            if (this.elements.positionInputY) {\n              this.elements.positionInputY.value = yPercentUp.toString();\n            }\n            if (this.elements.positionInputX) {\n              this.elements.positionInputX.value = xPercent.toString();\n            }\n          }\n        }\n      }, {\n        key: \"closeLightBox\",\n        value: function value() {\n          var t = this; // Make sure t is initialized with this\n\n          this.log(\"Closing light-box\"), this.elements.lightBox.classList.remove(\"active\"), this.videoTimeUpdateInterval && (clearInterval(this.videoTimeUpdateInterval), this.videoTimeUpdateInterval = null), this.elements.videoControlsObj && this.config.videoControls.enabled && (this.elements.videoControls.parentNode && this.elements.videoControls.parentNode.removeChild(this.elements.videoControls), this.elements.overlay && (this.elements.overlay.appendChild(this.elements.videoControls), this.elements.videoControlsObj.setMode(\"overlay\", this.elements.container), this.elements.videoControls.style.display = \"none\")), this.log(\"Always resuming video on lightbox close\"),\n          // QuadTap MOD: Video is always played when lightbox closes. Overlay is always deactivated.\n          setTimeout(function () {\n            !function (t) {\n              // Call h (play)\n              h.apply(this, arguments);\n            }(t),\n            // Update control strip UI if it exists\n            t.elements.videoControls && t.elements.videoControlsObj && (t.elements.videoControlsObj.updatePlayPauseButton ? t.elements.videoControlsObj.updatePlayPauseButton(!0) : j(t.elements.videoControls, !0));\n          }, 100),\n          // Clear swipe info when lightbox closes\n          this.state.swipeInfo = null, this.state.swipeProcessing = false,\n          // Find and remove any swipe info elements\n          this.elements.lightBoxContent && this.elements.lightBoxContent.querySelector('.swipe-info') && this.elements.lightBoxContent.querySelector('.swipe-info').parentNode.removeChild(this.elements.lightBoxContent.querySelector('.swipe-info')), this.deactivateOverlay(); // QuadTap MOD: Ensure overlay is deactivated.\n        }\n      }, {\n        key: \"updateVideoTimeDisplay\",\n        value: function value() {\n          if (this.elements.videoInfoDisplay) {\n            var t = document.querySelector(this.config.videoSelector);\n            if (t) {\n              var e = function e(t) {\n                  if (isNaN(t) || !isFinite(t)) return \"0:00\";\n                  var e = Math.floor(t / 60),\n                    o = Math.floor(t % 60);\n                  return \"\".concat(e, \":\").concat(o < 10 ? \"0\" : \"\").concat(o);\n                },\n                o = e(t.currentTime),\n                n = e(t.duration);\n              if (this.elements.videoInfoDisplay.textContent = \"\".concat(o, \" / \").concat(n), this.elements.currentTimeElement && (this.elements.currentTimeElement.textContent = o), this.elements.durationElement && (this.elements.durationElement.textContent = n), this.elements.videoSlider && t.duration) {\n                var i = t.currentTime / t.duration * 100;\n                this.elements.videoSlider.value = i;\n              }\n            }\n          }\n        }\n      }, {\n        key: \"startRecording\",\n        value: function value() {\n          var t = this;\n          if (this.log(\"Starting video recording\"), this.state.recording = !0, !navigator.mediaDevices || !window.MediaRecorder) return this.log(\"MediaRecorder API not supported\"), alert(\"Video recording is not supported in your browser\"), void (this.state.recording = !1);\n          navigator.mediaDevices.getUserMedia({\n            video: !0,\n            audio: !0\n          }).then(function (e) {\n            t.state.mediaStream = e, t.state.mediaRecorder = new MediaRecorder(e);\n            var o = [];\n            t.state.mediaRecorder.ondataavailable = function (t) {\n              t.data.size > 0 && o.push(t.data);\n            }, t.state.mediaRecorder.onstop = function () {\n              var e = new Blob(o, {\n                type: \"video/webm\"\n              });\n              r(\"recordedVideo\", URL.createObjectURL(e)), t.saveEventToHistory({\n                type: \"video_recording\",\n                size: e.size,\n                duration: Date.now() - t.state.recordingStartTime\n              }), t.state.mediaStream.getTracks().forEach(function (t) {\n                return t.stop();\n              }), t.state.mediaStream = null, t.state.mediaRecorder = null, t.state.recording = !1;\n            }, t.state.mediaRecorder.start(), t.state.recordingStartTime = Date.now();\n            var n = document.createElement(\"div\");\n            n.className = \"recording-indicator\", n.textContent = \"🔴 Recording...\", n.style.position = \"absolute\", n.style.top = \"10px\", n.style.right = \"10px\", n.style.backgroundColor = \"rgba(255, 0, 0, 0.7)\", n.style.color = \"white\", n.style.padding = \"5px 10px\", n.style.borderRadius = \"4px\", n.style.zIndex = \"1002\", t.elements.lightBoxContent.appendChild(n), t.state.recordingIndicator = n;\n          })[\"catch\"](function (e) {\n            t.log(\"Error accessing media devices\", e), alert(\"Could not access camera and microphone\"), t.state.recording = !1;\n          });\n        }\n      }, {\n        key: \"stopRecording\",\n        value: function value() {\n          this.log(\"Stopping video recording\"), this.state.mediaRecorder && this.state.recording && (this.state.mediaRecorder.stop(), this.state.recordingIndicator && this.state.recordingIndicator.parentNode && this.state.recordingIndicator.parentNode.removeChild(this.state.recordingIndicator));\n        }\n      }, {\n        key: \"toggleVideoPause\",\n        value: function value() {\n          var t = this;\n          this.log(\"Toggling video pause/play state\");\n          var e = this.config.videoPlayerApi && this.config.videoPlayerApi.enabled && this.config.videoPlayerApi.adapter,\n            o = document.querySelector(this.config.videoSelector);\n          if (e) e.isPlaying().then(function (o) {\n            if (o) {\n              e.pause();\n              var n = t.elements.lightBox.querySelector(\".td-pause-play-btn\");\n              n && (n.textContent = \"▶️\");\n            } else {\n              e.play();\n              var i = t.elements.lightBox.querySelector(\".td-pause-play-btn\");\n              i && (i.textContent = \"⏸️\");\n            }\n          });else if (o) if (o.paused) o.play().then(function () {\n            var e = t.elements.lightBox.querySelector(\".td-pause-play-btn\");\n            e && (e.textContent = \"⏸️\");\n          })[\"catch\"](function (e) {\n            t.log(\"Error playing video\", e);\n          });else {\n            o.pause();\n            var n = this.elements.lightBox.querySelector(\".td-pause-play-btn\");\n            n && (n.textContent = \"▶️\");\n          }\n          this.config.callbacks.onVideoControl && this.config.callbacks.onVideoControl(\"playpause\", o ? o.currentTime : 0);\n        }\n      }, {\n        key: \"destroy\",\n        value: function value() {\n          this.log(\"Destroying QuadTap\"), this.state.autoCancelTimer && clearTimeout(this.state.autoCancelTimer), this.state.swipeDebounceTimer && clearTimeout(this.state.swipeDebounceTimer),\n          // Add this line\n          this.elements.container && this.elements.container.removeEventListener(\"click\", this.handleContainerClick), this.elements.profileBubble && this.elements.profileBubble.removeEventListener(\"click\", this.handleBubbleClick), this.elements.lightBox && this.elements.lightBox.removeEventListener(\"click\", this.handleLightBoxClick), this.elements.video && (this.elements.video.removeEventListener(\"play\", this.handleVideoPlay), this.elements.video.removeEventListener(\"pause\", this.handleVideoPause)), window.removeEventListener(\"resize\", this.throttledResize), document.removeEventListener(\"keydown\", this.handleKeyDown), this.elements.overlay && this.elements.overlay.parentNode && this.elements.overlay.parentNode.removeChild(this.elements.overlay), this.elements.lightBox && this.elements.lightBox.parentNode && this.elements.lightBox.parentNode.removeChild(this.elements.lightBox), this.state.recording && this.state.mediaRecorder && this.stopRecording(), this.state.mediaStream && this.state.mediaStream.getTracks().forEach(function (t) {\n            return t.stop();\n          }), this.state = {\n            active: !1,\n            profileBubblePosition: {\n              x: 0,\n              y: 0\n            },\n            currentQuadrant: null,\n            autoCancelTimer: null,\n            containerDimensions: {\n              width: 0,\n              height: 0\n            },\n            videoPlaying: !1,\n            recording: !1,\n            mediaStream: null,\n            mediaRecorder: null,\n            recordingStartTime: 0,\n            recordingIndicator: null,\n            swipeDebounceTimer: null,\n            swipeProcessing: !1 // Add this new property\n          }, this.log(\"QuadTap destroyed\");\n        }\n      }, {\n        key: \"openLightBoxWithLongPressInfo\",\n        value: function value(longPressEvent) {\n          var t = this;\n\n          // First open the normal lightbox\n          this.openLightBox();\n\n          // Create or update content in the lightbox\n          if (this.elements.lightBoxContent) {\n            // Create header\n            var header = document.createElement('h2');\n            header.textContent = 'Long Press Detected';\n            header.style.marginBottom = '15px';\n\n            // Create event info display\n            var longPressInfoElement = document.createElement('div');\n            longPressInfoElement.className = 'long-press-info';\n            longPressInfoElement.style.backgroundColor = '#f5f5f5';\n            longPressInfoElement.style.padding = '15px';\n            longPressInfoElement.style.borderRadius = '5px';\n            longPressInfoElement.style.marginBottom = '15px';\n            longPressInfoElement.style.maxHeight = '200px';\n            longPressInfoElement.style.overflowY = 'auto';\n\n            // Create formatted info text\n            var infoHTML = '';\n            infoHTML += '<p><strong>Position:</strong> X: ' + Math.round(longPressEvent.positionX) + ', Y: ' + Math.round(longPressEvent.positionY) + '</p>';\n            infoHTML += '<p><strong>Quadrant:</strong> ' + longPressEvent.quadrant + '</p>';\n            infoHTML += '<p><strong>Time:</strong> ' + new Date(longPressEvent.timestamp).toLocaleTimeString() + '</p>';\n            longPressInfoElement.innerHTML = infoHTML;\n\n            // Create events list section\n            var eventsListHeader = document.createElement('h3');\n            eventsListHeader.textContent = 'Recent Events';\n            eventsListHeader.style.marginTop = '20px';\n            eventsListHeader.style.marginBottom = '10px';\n            var eventsList = document.createElement('div');\n            eventsList.className = 'events-list';\n            eventsList.style.backgroundColor = '#f5f5f5';\n            eventsList.style.padding = '15px';\n            eventsList.style.borderRadius = '5px';\n            eventsList.style.maxHeight = '150px';\n            eventsList.style.overflowY = 'auto';\n\n            // Get events from localStorage\n            var events = [];\n            try {\n              var storedEvents = localStorage.getItem(\"quadTapEvents\");\n              if (storedEvents) {\n                events = JSON.parse(storedEvents);\n                // Get the last 10 events maximum\n                events = events.slice(-10);\n              }\n            } catch (err) {\n              t.log(\"Error loading events from localStorage\", err);\n            }\n\n            // Format and display the events\n            if (events.length > 0) {\n              var eventsHTML = '<ul style=\"list-style-type: none; padding-left: 0;\">';\n              events.forEach(function (event) {\n                var eventTime = new Date(event.timestamp).toLocaleTimeString();\n                var eventType = event.type || 'unknown';\n                eventsHTML += '<li style=\"margin-bottom: 5px; padding: 5px; border-bottom: 1px solid #eee;\">';\n                eventsHTML += '<strong>' + eventType + '</strong> (' + eventTime + ')';\n                if (event.positionX !== undefined && event.positionY !== undefined) {\n                  eventsHTML += ' - Position: X: ' + Math.round(event.positionX) + ', Y: ' + Math.round(event.positionY);\n                }\n                if (event.quadrant) {\n                  eventsHTML += ' [' + event.quadrant + ']';\n                }\n                eventsHTML += '</li>';\n              });\n              eventsHTML += '</ul>';\n              eventsList.innerHTML = eventsHTML;\n            } else {\n              eventsList.innerHTML = '<p>No events recorded yet.</p>';\n            }\n\n            // Clear existing content\n            this.elements.lightBoxContent.innerHTML = '';\n\n            // Add all elements to the lightbox\n            this.elements.lightBoxContent.appendChild(header);\n            this.elements.lightBoxContent.appendChild(longPressInfoElement);\n            this.elements.lightBoxContent.appendChild(eventsListHeader);\n            this.elements.lightBoxContent.appendChild(eventsList);\n          }\n        }\n      }, {\n        key: \"getAllEvents\",\n        value: function value() {\n          try {\n            var events = localStorage.getItem(\"quadTapEvents\");\n            if (events) {\n              return JSON.parse(events);\n            }\n            return [];\n          } catch (err) {\n            this.log(\"Error retrieving events from localStorage\", err);\n            return [];\n          }\n        }\n      }, {\n        key: \"getEventsByType\",\n        value: function value(type) {\n          try {\n            var allEvents = this.getAllEvents();\n            if (allEvents && allEvents.length) {\n              return allEvents.filter(function (event) {\n                return event.type === type;\n              });\n            }\n            return [];\n          } catch (err) {\n            this.log(\"Error filtering events by type\", err);\n            return [];\n          }\n        }\n      }, {\n        key: \"saveEventToHistory\",\n        value: function value(t) {\n          t.timestamp = new Date().toISOString(), t.context = {\n            profileBubblePosition: this.state.profileBubblePosition,\n            currentQuadrant: this.state.currentQuadrant,\n            containerDimensions: this.state.containerDimensions\n          };\n          var e = [];\n          try {\n            var o = localStorage.getItem(\"quadTapEvents\");\n            o && (e = JSON.parse(o));\n          } catch (t) {\n            this.log(\"Error parsing stored events\", t);\n          }\n\n          // Ensure we don't exceed max event limit (1000)\n          if (e.length >= 1000) {\n            // Remove the oldest 100 events when we hit the limit\n            e = e.slice(-900);\n          }\n          e.push(t), localStorage.setItem(\"quadTapEvents\", JSON.stringify(e)), localStorage.setItem(\"quadTapCurrentEvent\", JSON.stringify(t)), this.log(\"Event saved to history\", t);\n        }\n      }], e && B(t.prototype, e), Object.defineProperty(t, \"prototype\", {\n        writable: !1\n      }), t;\n      // removed by dead control flow\n{ var t, e; }\n    }();\n    function O(t, e) {\n      var o = Object.keys(t);\n      if (Object.getOwnPropertySymbols) {\n        var n = Object.getOwnPropertySymbols(t);\n        e && (n = n.filter(function (e) {\n          return Object.getOwnPropertyDescriptor(t, e).enumerable;\n        })), o.push.apply(o, n);\n      }\n      return o;\n    }\n    function z(t) {\n      for (var e = 1; e < arguments.length; e++) {\n        var o = null != arguments[e] ? arguments[e] : {};\n        e % 2 ? O(Object(o), !0).forEach(function (e) {\n          L(t, e, o[e]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(o)) : O(Object(o)).forEach(function (e) {\n          Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(o, e));\n        });\n      }\n      return t;\n    }\n    function L(t, e, o) {\n      return (e = N(e)) in t ? Object.defineProperty(t, e, {\n        value: o,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }) : t[e] = o, t;\n    }\n    function R(t) {\n      return R = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      }, R(t);\n    }\n    function I(t, e) {\n      for (var o = 0; o < e.length; o++) {\n        var n = e[o];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(t, N(n.key), n);\n      }\n    }\n    function N(t) {\n      var e = function (t) {\n        if (\"object\" != R(t) || !t) return t;\n        var e = t[Symbol.toPrimitive];\n        if (void 0 !== e) {\n          var o = e.call(t, \"string\");\n          if (\"object\" != R(o)) return o;\n          throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return String(t);\n      }(t);\n      return \"symbol\" == R(e) ? e : e + \"\";\n    }\n    var D = function () {\n      return t = function t() {\n        !function (t, e) {\n          if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, t), this.settings = {\n          containerId: \"quad-tap-container\",\n          videoSelector: \"video\",\n          debug: !1,\n          autoCancelTimeout: 3e3,\n          autoInitialize: !1,\n          quadrantEmojis: {\n            topLeft: \"🌈\",\n            topRight: \"🔥\",\n            bottomLeft: \"💧\",\n            bottomRight: \"🌪️\"\n          },\n          directionalEmojis: {\n            north: \"⬆️\",\n            east: \"➡️\",\n            south: \"⬇️\",\n            west: \"⬅️\"\n          },\n          thoughtEmojis: {\n            topLeft: [\"🌈\", \"🦄\", \"🌟\", \"🌻\"],\n            topRight: [\"🔥\", \"⚡\", \"💥\", \"🌋\"],\n            bottomLeft: [\"💧\", \"🌊\", \"❄️\", \"☔\"],\n            bottomRight: [\"🌪️\", \"🌩️\", \"⛈️\", \"🌀\"]\n          },\n          videoControls: {\n            enabled: !0,\n            position: \"center\",\n            autoHide: !0,\n            autoHideDelay: 2e3,\n            pauseOnLightboxOnly: !0\n          },\n          tooltip: {\n            enabled: !0,\n            position: \"above-controls\",\n            text: \"Tap elsewhere to cancel\",\n            style: {\n              backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n              color: \"white\",\n              padding: \"8px 12px\",\n              borderRadius: \"4px\"\n            }\n          },\n          swipeNavigation: {\n            enabled: !0,\n            threshold: 50,\n            direction: \"vertical\"\n          },\n          northContextBar: {\n            enabled: !0,\n            content: \"FROM\"\n          },\n          southContextBar: {\n            enabled: !0,\n            content: \"TO\"\n          },\n          coordinateSystem: {\n            type: \"percentage\",\n            storeMetadata: !0\n          },\n          emojiSizes: {\n            \"default\": \"24px\",\n            active: \"36px\"\n          },\n          profileBubble: {\n            imageUrl: null,\n            fallbackEmoji: \"👤\",\n            size: \"60px\",\n            borderColor: \"white\",\n            borderWidth: \"2px\",\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\"\n          },\n          colors: {\n            overlay: {\n              background: \"rgba(240, 240, 245, 0.5)\",\n              quadrantGradients: {\n                topLeft: \"rgba(0, 255, 255, 0.8)\",\n                topRight: \"rgba(255, 255, 0, 0.8)\",\n                bottomLeft: \"rgba(0, 255, 0, 0.8)\",\n                bottomRight: \"rgba(255, 0, 255, 0.8)\"\n              }\n            },\n            lightbox: {\n              background: \"rgba(0, 0, 0, 0.9)\",\n              text: \"white\",\n              headerBackground: \"rgba(50, 50, 50, 0.8)\",\n              buttonPrimary: \"#4CAF50\",\n              buttonSecondary: \"#f44336\"\n            }\n          },\n          callbacks: {\n            onOverlayActivate: null,\n            onThrowDownInitiate: null,\n            onThrowDownConfirm: null,\n            onThrowDownCancel: null,\n            onVideoControl: null\n          },\n          videoPlayerApi: {\n            enabled: !1,\n            adapter: null\n          }\n        };\n      }, (e = [{\n        key: \"withContainer\",\n        value: function value(t) {\n          return \"string\" != typeof t && console.warn(\"[SettingsBuilder] containerId should be a string\"), this.settings.containerId = t, this;\n        }\n      }, {\n        key: \"withVideoSelector\",\n        value: function value(t) {\n          return \"string\" != typeof t && console.warn(\"[SettingsBuilder] videoSelector should be a string\"), this.settings.videoSelector = t, this;\n        }\n      }, {\n        key: \"withDebug\",\n        value: function value(t) {\n          return \"boolean\" != typeof t && console.warn(\"[SettingsBuilder] debug should be a boolean\"), this.settings.debug = t, this;\n        }\n      }, {\n        key: \"withAutoCancelTimeout\",\n        value: function value(t) {\n          return (\"number\" != typeof t || t < 0) && console.warn(\"[SettingsBuilder] autoCancelTimeout should be a positive number\"), this.settings.autoCancelTimeout = t, this;\n        }\n      }, {\n        key: \"withQuadrantEmojis\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] quadrantEmojis should be an object\"), this) : (this.settings.quadrantEmojis = z(z({}, this.settings.quadrantEmojis), t), this);\n        }\n      }, {\n        key: \"withDirectionalEmojis\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] directionalEmojis should be an object\"), this) : (this.settings.directionalEmojis = z(z({}, this.settings.directionalEmojis), t), this);\n        }\n      }, {\n        key: \"withThoughtEmojisForQuadrant\",\n        value: function value(t, e) {\n          return [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"].includes(t) ? Array.isArray(e) ? (this.settings.thoughtEmojis[t] = e, this) : (console.warn(\"[SettingsBuilder] emojis should be an array\"), this) : (console.warn(\"[SettingsBuilder] quadrant should be one of: topLeft, topRight, bottomLeft, bottomRight\"), this);\n        }\n      }, {\n        key: \"withThoughtEmojis\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] thoughtEmojis should be an object\"), this) : (this.settings.thoughtEmojis = z(z({}, this.settings.thoughtEmojis), t), this);\n        }\n      }, {\n        key: \"withVideoControls\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] videoControlsConfig should be an object\"), this) : (this.settings.videoControls = z(z({}, this.settings.videoControls), t), this);\n        }\n      }, {\n        key: \"withTooltip\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] tooltipConfig should be an object\"), this) : (t.style && \"object\" === R(t.style) && (t.style = z(z({}, this.settings.tooltip.style), t.style)), this.settings.tooltip = z(z({}, this.settings.tooltip), t), this);\n        }\n      }, {\n        key: \"withSwipeNavigation\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] swipeConfig should be an object\"), this) : (this.settings.swipeNavigation = z(z({}, this.settings.swipeNavigation), t), this);\n        }\n      }, {\n        key: \"withNorthContextBar\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] northConfig should be an object\"), this) : (this.settings.northContextBar = z(z({}, this.settings.northContextBar), t), this);\n        }\n      }, {\n        key: \"withSouthContextBar\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] southConfig should be an object\"), this) : (this.settings.southContextBar = z(z({}, this.settings.southContextBar), t), this);\n        }\n      }, {\n        key: \"withCoordinateSystem\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] coordinateConfig should be an object\"), this) : (this.settings.coordinateSystem = z(z({}, this.settings.coordinateSystem), t), this);\n        }\n      }, {\n        key: \"withAutoInitialize\",\n        value: function value(t) {\n          return \"boolean\" != typeof t && console.warn(\"[SettingsBuilder] autoInitialize should be a boolean\"), this.settings.autoInitialize = t, this;\n        }\n      }, {\n        key: \"withProfileBubble\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] bubbleConfig should be an object\"), this) : (this.settings.profileBubble = z(z({}, this.settings.profileBubble), t), this);\n        }\n      }, {\n        key: \"withOverlayColors\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] overlayColors should be an object\"), this) : (t.quadrantGradients && \"object\" === R(t.quadrantGradients) && (t.quadrantGradients = z(z({}, this.settings.colors.overlay.quadrantGradients), t.quadrantGradients)), this.settings.colors.overlay = z(z({}, this.settings.colors.overlay), t), this);\n        }\n      }, {\n        key: \"withLightboxColors\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] lightboxColors should be an object\"), this) : (this.settings.colors.lightbox = z(z({}, this.settings.colors.lightbox), t), this);\n        }\n      }, {\n        key: \"withColors\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] colorConfig should be an object\"), this) : (t.overlay && \"object\" === R(t.overlay) && (t.overlay.quadrantGradients && \"object\" === R(t.overlay.quadrantGradients) && (t.overlay.quadrantGradients = z(z({}, this.settings.colors.overlay.quadrantGradients), t.overlay.quadrantGradients)), t.overlay = z(z({}, this.settings.colors.overlay), t.overlay)), t.lightbox && \"object\" === R(t.lightbox) && (t.lightbox = z(z({}, this.settings.colors.lightbox), t.lightbox)), this.settings.colors = z(z({}, this.settings.colors), t), this);\n        }\n      }, {\n        key: \"withEmojiSizes\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] sizeConfig should be an object\"), this) : (this.settings.emojiSizes = z(z({}, this.settings.emojiSizes), t), this);\n        }\n      }, {\n        key: \"withVideoPlayerApi\",\n        value: function value(t) {\n          return \"object\" !== R(t) ? (console.warn(\"[SettingsBuilder] apiConfig should be an object\"), this) : (this.settings.videoPlayerApi = z(z({}, this.settings.videoPlayerApi), t), this);\n        }\n      }, {\n        key: \"withVideoPlayerAdapter\",\n        value: function value(t) {\n          return t ? (this.settings.videoPlayerApi = z(z({}, this.settings.videoPlayerApi), {}, {\n            enabled: !0,\n            adapter: t\n          }), this) : (console.warn(\"[SettingsBuilder] adapter should be a valid VideoPlayerAdapter instance\"), this);\n        }\n      }, {\n        key: \"onOverlayActivate\",\n        value: function value(t) {\n          return \"function\" != typeof t ? (console.warn(\"[SettingsBuilder] callback should be a function\"), this) : (this.settings.callbacks.onOverlayActivate = t, this);\n        }\n      }, {\n        key: \"onThrowDownInitiate\",\n        value: function value(t) {\n          return \"function\" != typeof t ? (console.warn(\"[SettingsBuilder] callback should be a function\"), this) : (this.settings.callbacks.onThrowDownInitiate = t, this);\n        }\n      }, {\n        key: \"onThrowDownConfirm\",\n        value: function value(t) {\n          return \"function\" != typeof t ? (console.warn(\"[SettingsBuilder] callback should be a function\"), this) : (this.settings.callbacks.onThrowDownConfirm = t, this);\n        }\n      }, {\n        key: \"onThrowDownCancel\",\n        value: function value(t) {\n          return \"function\" != typeof t ? (console.warn(\"[SettingsBuilder] callback should be a function\"), this) : (this.settings.callbacks.onThrowDownCancel = t, this);\n        }\n      }, {\n        key: \"onVideoControl\",\n        value: function value(t) {\n          return \"function\" != typeof t ? (console.warn(\"[SettingsBuilder] callback should be a function\"), this) : (this.settings.callbacks.onVideoControl = t, this);\n        }\n      }, {\n        key: \"build\",\n        value: function value() {\n          return this.validateSettings(), JSON.parse(JSON.stringify(this.settings));\n        }\n      }, {\n        key: \"validateSettings\",\n        value: function value() {\n          this.settings.containerId || (console.warn('[SettingsBuilder] containerId is required, using default: \"quad-tap-container\"'), this.settings.containerId = \"quad-tap-container\"), this.settings.videoSelector || (console.warn('[SettingsBuilder] videoSelector is required, using default: \"video\"'), this.settings.videoSelector = \"video\"), this.settings.videoControls.enabled && ![\"center\", \"bottom-center\", \"top-center\"].includes(this.settings.videoControls.position) && (console.warn(\"[SettingsBuilder] Invalid video controls position: \".concat(this.settings.videoControls.position, ', using default: \"center\"')), this.settings.videoControls.position = \"center\"), this.settings.tooltip.enabled && ![\"above-controls\", \"below-controls\", \"on-bubble\"].includes(this.settings.tooltip.position) && (console.warn(\"[SettingsBuilder] Invalid tooltip position: \".concat(this.settings.tooltip.position, ', using default: \"above-controls\"')), this.settings.tooltip.position = \"above-controls\"), this.settings.swipeNavigation.enabled && ![\"vertical\", \"horizontal\"].includes(this.settings.swipeNavigation.direction) && (console.warn(\"[SettingsBuilder] Invalid swipe direction: \".concat(this.settings.swipeNavigation.direction, ', using default: \"vertical\"')), this.settings.swipeNavigation.direction = \"vertical\"), [\"absolute\", \"normalized\", \"percentage\"].includes(this.settings.coordinateSystem.type) || (console.warn(\"[SettingsBuilder] Invalid coordinate system type: \".concat(this.settings.coordinateSystem.type, ', using default: \"percentage\"')), this.settings.coordinateSystem.type = \"percentage\");\n        }\n      }]) && I(t.prototype, e), Object.defineProperty(t, \"prototype\", {\n        writable: !1\n      }), t;\n      // removed by dead control flow\n{ var t, e; }\n    }();\n    window.quadTapInitialized = !1;\n    var A = function A() {\n      if (window.quadTapInitialized) console.log(\"[QuadTap] Already initialized, skipping auto-initialization\");else {\n        var t = document.querySelectorAll(\"[data-quad-tap-auto-init]\");\n        if (0 === t.length) {\n          var e = document.getElementById(\"main-video-droppable\");\n          if (e) return console.log(\"[QuadTap] Auto-initializing with default container\"), window.quadTap = new P(), e.quadTap = window.quadTap, window.quadTapInitialized = !0, window.activateOverlay = function (t, e) {\n            if (window.quadTap) {\n              var o = document.getElementById(\"main-video-droppable\");\n              if (o) {\n                var n = o.getBoundingClientRect(),\n                  i = t || n.width / 2,\n                  a = e || n.height / 2;\n                return window.quadTap.activateOverlay(i, a);\n              }\n            }\n            return !1;\n          }, window.openLightBox = function () {\n            return !!window.quadTap && (window.quadTap.openLightBox(), !0);\n          }, window.ensureControlStripModuleAvailable = function () {\n            !window.updatePlayPauseButton && j && (window.updatePlayPauseButton = j);\n          }, void window.ensureControlStripModuleAvailable();\n        }\n        t.length > 0 && (console.log(\"[QuadTap] Auto-initializing \".concat(t.length, \" containers\")), t.forEach(function (t) {\n          var e = t.id;\n          if (e) {\n            var o = t.getAttribute(\"data-quad-tap-video-selector\") || \"video\",\n              n = t.getAttribute(\"data-quad-tap-profile-image\"),\n              i = new D().withContainer(e).withVideoSelector(o).withAutoInitialize(!0);\n            n && i.withProfileBubble({\n              imageUrl: n\n            });\n            var a = t.getAttribute(\"data-quad-tap-overlay-bg\"),\n              r = t.getAttribute(\"data-quad-tap-lightbox-bg\");\n            if (a || r) {\n              var s = {};\n              a && (s.overlay = {\n                background: a\n              }), r && (s.lightbox = {\n                background: r\n              }), i.withColors(s);\n            }\n            var l = new P(i.build());\n            t.quadTap = l, window.quadTap || (window.quadTap = l);\n          } else console.warn(\"[QuadTap] Container must have an ID for auto-initialization\");\n        }), window.quadTapInitialized = !0, window.activateOverlay = function (t, e) {\n          if (window.quadTap) {\n            var o = document.querySelector(\"[data-quad-tap-auto-init]\") || document.getElementById(\"main-video-droppable\");\n            if (o) {\n              var n = o.getBoundingClientRect(),\n                i = t || n.width / 2,\n                a = e || n.height / 2;\n              return window.quadTap.activateOverlay(i, a);\n            }\n          }\n          return !1;\n        }, window.openLightBox = function () {\n          return !!window.quadTap && (window.quadTap.openLightBox(), !0);\n        }, window.ensureControlStripModuleAvailable = function () {\n          !window.updatePlayPauseButton && j && (window.updatePlayPauseButton = j);\n        }, window.ensureControlStripModuleAvailable());\n      }\n    };\n    \"undefined\" != typeof document && (\"loading\" === document.readyState ? document.addEventListener(\"DOMContentLoaded\", A) : A(), window.addEventListener(\"load\", function () {\n      window.quadTapInitialized || (console.log(\"[QuadTap] Attempting initialization on window load\"), A());\n    }), setTimeout(function () {\n      window.quadTapInitialized || (console.log(\"[QuadTap] Final attempt to initialize QuadTap...\"), A());\n    }, 1e3), setTimeout(function () {\n      if (!window.quadTapInitialized) {\n        console.log(\"[QuadTap] Forcing initialization...\");\n        var t = document.querySelectorAll(\"[data-quad-tap-auto-init]\"),\n          e = document.getElementById(\"main-video-droppable\");\n        if (t.length > 0 || e) console.log(\"[QuadTap] Found container, initializing...\"), A();else {\n          console.log(\"[QuadTap] No container found, creating default container...\");\n          var o = document.querySelectorAll(\"video\");\n          if (o.length > 0) {\n            var n = o[0],\n              i = n.parentElement,\n              a = document.createElement(\"div\");\n            a.id = \"main-video-droppable\", a.style.position = \"relative\", i.replaceChild(a, n), a.appendChild(n), console.log(\"[QuadTap] Created default container, initializing...\"), A();\n          }\n        }\n      }\n    }, 2e3));\n    var M = P;\n    // QuadTap MOD: Attach SettingsBuilder to the main export if needed for external access.\n    // And ensure VideoPlayerAdapter and Coordinates are similarly available if they are part of the public API.\n    // For now, the primary export is the QuadTap class (M).\n    // The original return 'e.default.SettingsBuilder.VideoPlayerAdapter.Coordinates' seemed to be an issue.\n    // Let's return the main module object 'e' which contains the default export.\n    // Or more simply, return M (P, the QuadTap class) directly as the default export.\n    // The UMD wrapper handles assigning t() to module.exports etc.\n    // So, what t() returns becomes the module's value.\n    // The tests import QuadTap from '../src/QuadTap', expecting QuadTap to be the class P.\n\n    // Let's ensure SettingsBuilder is a static property of QuadTap (P/M)\n    // And VideoPlayerAdapter and Coordinates are properties of SettingsBuilder, if that's the intended structure.\n    // However, VideoPlayerAdapter and Coordinates are not defined as top-level entities in this bundle.\n    // They are mocked in tests, implying they might be separate modules in the source.\n\n    // The simplest change to make the test pass without breaking the library's intended structure\n    // is to ensure that the path e.default.SettingsBuilder.VideoPlayerAdapter is valid.\n    // e.default is P. So we need P.SettingsBuilder.VideoPlayerAdapter.\n    // P.SettingsBuilder should be D.\n    M.SettingsBuilder = D;\n\n    // VideoPlayerAdapter and Coordinates are not defined in this scope.\n    // The error is likely that D (SettingsBuilder) does not have a VideoPlayerAdapter property.\n    // Let's assume VideoPlayerAdapter and Coordinates are meant to be attached to SettingsBuilder for export.\n    // Since they are not defined here, we can't attach them.\n    // The original line `return e.default.SettingsBuilder.VideoPlayerAdapter.Coordinates`\n    // suggests that this specific, deeply nested object is the *only* thing this module exports,\n    // which is highly unlikely for a library.\n    // The UMD wrapper `module.exports = t()` means the result of `t()` is the export.\n    // It should be the main QuadTap class `M`.\n    // The error might be that `e.default.SettingsBuilder` (i.e. `P.SettingsBuilder`) is undefined\n    // when `VideoPlayerAdapter` is accessed on it.\n\n    // Let's try returning M, and ensure M has SettingsBuilder.\n    // The test `QuadTap.test.js` imports `SettingsBuilder from '../src/SettingsBuilder';`\n    // and `VideoPlayerAdapter from '../src/adapters/VideoPlayerAdapter';`\n    // This means they are separate modules in the source, and the bundler might be confused.\n\n    // The error is in src/QuadTap.js itself, not the test.\n    // The line `return e.default.SettingsBuilder.VideoPlayerAdapter.Coordinates` is problematic.\n    // `e.default` is `P`. `P.SettingsBuilder` needs to be `D`.\n    // Then `D.VideoPlayerAdapter.Coordinates` needs to be valid.\n    // Since `VideoPlayerAdapter` and `Coordinates` are not defined in this file,\n    // this structure cannot be formed here.\n\n    // The most robust fix is to change what the IIFE returns. It should return the main class `M`.\n    // Any static properties like SettingsBuilder should be attached to `M`.\n    M.SettingsBuilder = D; // Attach SettingsBuilder class D as a static property of QuadTap class M (P)\n\n    // The original return value 'e.default.SettingsBuilder.VideoPlayerAdapter.Coordinates'\n    // is likely an artifact or misconfiguration of the bundling process.\n    // The module should export the QuadTap class primarily.\n    return M; // Return the main QuadTap class.\n  }();\n}, \"object\" == ( false ? 0 : _typeof(exports)) && \"object\" == ( false ? 0 : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/QuadTap.js\n");

/***/ }),

/***/ "./src/SettingsBuilder.js":
/*!********************************!*\
  !*** ./src/SettingsBuilder.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * SettingsBuilder provides a fluent interface for configuring QuadTap.\n * It allows you to easily customize all aspects of QuadTap's behavior.\n */\nvar SettingsBuilder = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function SettingsBuilder() {\n    _classCallCheck(this, SettingsBuilder);\n    // Initialize with default settings\n    this.settings = {\n      containerId: 'quad-tap-container',\n      videoSelector: 'video',\n      debug: false,\n      autoCancelTimeout: 3000,\n      autoInitialize: false,\n      // Whether to automatically initialize on page load\n      quadrantEmojis: {\n        topLeft: '🌈',\n        topRight: '🔥',\n        bottomLeft: '💧',\n        bottomRight: '🌪️'\n      },\n      directionalEmojis: {\n        north: '⬆️',\n        east: '➡️',\n        south: '⬇️',\n        west: '⬅️'\n      },\n      thoughtEmojis: {\n        topLeft: ['🌈', '🦄', '🌟', '🌻'],\n        topRight: ['🔥', '⚡', '💥', '🌋'],\n        bottomLeft: ['💧', '🌊', '❄️', '☔'],\n        bottomRight: ['🌪️', '🌩️', '⛈️', '🌀']\n      },\n      videoControls: {\n        enabled: true,\n        position: 'center',\n        autoHide: true,\n        autoHideDelay: 2000,\n        pauseOnLightboxOnly: true\n      },\n      tooltip: {\n        enabled: true,\n        position: 'above-controls',\n        text: 'Tap elsewhere to cancel',\n        style: {\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '8px 12px',\n          borderRadius: '4px'\n        }\n      },\n      swipeNavigation: {\n        enabled: true,\n        threshold: 50,\n        direction: 'vertical'\n      },\n      northContextBar: {\n        enabled: true,\n        content: 'FROM'\n      },\n      southContextBar: {\n        enabled: true,\n        content: 'TO'\n      },\n      coordinateSystem: {\n        type: 'percentage',\n        storeMetadata: true\n      },\n      emojiSizes: {\n        \"default\": '24px',\n        active: '36px'\n      },\n      profileBubble: {\n        imageUrl: null,\n        // URL to the profile image\n        fallbackEmoji: '👤',\n        // Fallback emoji if no image is provided\n        size: '60px',\n        // Size of the profile bubble\n        borderColor: 'white',\n        // Border color of the profile bubble\n        borderWidth: '2px',\n        // Border width of the profile bubble\n        backgroundColor: 'rgba(0, 0, 0, 0.7)' // Background color of the profile bubble\n      },\n      colors: {\n        overlay: {\n          background: 'rgba(240, 240, 245, 0.5)',\n          // Light overlay background color\n          quadrantGradients: {\n            topLeft: 'rgba(0, 255, 255, 0.8)',\n            // Stronger cyan\n            topRight: 'rgba(255, 255, 0, 0.8)',\n            // Stronger yellow\n            bottomLeft: 'rgba(0, 255, 0, 0.8)',\n            // Stronger green\n            bottomRight: 'rgba(255, 0, 255, 0.8)' // Stronger magenta\n          }\n        },\n        lightbox: {\n          background: 'rgba(23, 32, 42, 0.7)',\n          // Increased opacity for more prominent overlay\n          text: 'white',\n          // Lightbox text color\n          headerBackground: 'rgba(50, 50, 50, 0.8)',\n          // Lightbox header background\n          buttonPrimary: '#4CAF50',\n          // Primary button color (Save)\n          buttonSecondary: '#f44336' // Secondary button color (Cancel)\n        }\n      },\n      callbacks: {\n        onOverlayActivate: null,\n        onThrowDownInitiate: null,\n        onThrowDownConfirm: null,\n        onThrowDownCancel: null,\n        onVideoControl: null\n      },\n      videoPlayerApi: {\n        enabled: false,\n        adapter: null\n      }\n    };\n  }\n\n  /**\n   * Set the container ID\n   * @param {string} containerId - The ID of the container element\n   * @returns {SettingsBuilder} The builder instance for chaining\n   */\n  return _createClass(SettingsBuilder, [{\n    key: \"withContainer\",\n    value: function withContainer(containerId) {\n      if (typeof containerId !== 'string') {\n        console.warn('[SettingsBuilder] containerId should be a string');\n      }\n      this.settings.containerId = containerId;\n      return this;\n    }\n\n    /**\n     * Set the video selector\n     * @param {string} videoSelector - The CSS selector for the video element\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withVideoSelector\",\n    value: function withVideoSelector(videoSelector) {\n      if (typeof videoSelector !== 'string') {\n        console.warn('[SettingsBuilder] videoSelector should be a string');\n      }\n      this.settings.videoSelector = videoSelector;\n      return this;\n    }\n\n    /**\n     * Enable or disable debug mode\n     * @param {boolean} enabled - Whether to enable debug mode\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withDebug\",\n    value: function withDebug(enabled) {\n      if (typeof enabled !== 'boolean') {\n        console.warn('[SettingsBuilder] debug should be a boolean');\n      }\n      this.settings.debug = enabled;\n      return this;\n    }\n\n    /**\n     * Set the auto-cancel timeout\n     * @param {number} timeout - The timeout in milliseconds\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withAutoCancelTimeout\",\n    value: function withAutoCancelTimeout(timeout) {\n      if (typeof timeout !== 'number' || timeout < 0) {\n        console.warn('[SettingsBuilder] autoCancelTimeout should be a positive number');\n      }\n      this.settings.autoCancelTimeout = timeout;\n      return this;\n    }\n\n    /**\n     * Set the quadrant emojis\n     * @param {Object} quadrantEmojis - The quadrant emojis\n     * @param {string} quadrantEmojis.topLeft - The top-left quadrant emoji\n     * @param {string} quadrantEmojis.topRight - The top-right quadrant emoji\n     * @param {string} quadrantEmojis.bottomLeft - The bottom-left quadrant emoji\n     * @param {string} quadrantEmojis.bottomRight - The bottom-right quadrant emoji\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withQuadrantEmojis\",\n    value: function withQuadrantEmojis(quadrantEmojis) {\n      if (_typeof(quadrantEmojis) !== 'object') {\n        console.warn('[SettingsBuilder] quadrantEmojis should be an object');\n        return this;\n      }\n      this.settings.quadrantEmojis = _objectSpread(_objectSpread({}, this.settings.quadrantEmojis), quadrantEmojis);\n      return this;\n    }\n\n    /**\n     * Set the directional emojis\n     * @param {Object} directionalEmojis - The directional emojis\n     * @param {string} directionalEmojis.north - The north directional emoji\n     * @param {string} directionalEmojis.east - The east directional emoji\n     * @param {string} directionalEmojis.south - The south directional emoji\n     * @param {string} directionalEmojis.west - The west directional emoji\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withDirectionalEmojis\",\n    value: function withDirectionalEmojis(directionalEmojis) {\n      if (_typeof(directionalEmojis) !== 'object') {\n        console.warn('[SettingsBuilder] directionalEmojis should be an object');\n        return this;\n      }\n      this.settings.directionalEmojis = _objectSpread(_objectSpread({}, this.settings.directionalEmojis), directionalEmojis);\n      return this;\n    }\n\n    /**\n     * Set the thought emojis for a specific quadrant\n     * @param {string} quadrant - The quadrant ('topLeft', 'topRight', 'bottomLeft', 'bottomRight')\n     * @param {string[]} emojis - The thought emojis for the quadrant\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withThoughtEmojisForQuadrant\",\n    value: function withThoughtEmojisForQuadrant(quadrant, emojis) {\n      if (!['topLeft', 'topRight', 'bottomLeft', 'bottomRight'].includes(quadrant)) {\n        console.warn('[SettingsBuilder] quadrant should be one of: topLeft, topRight, bottomLeft, bottomRight');\n        return this;\n      }\n      if (!Array.isArray(emojis)) {\n        console.warn('[SettingsBuilder] emojis should be an array');\n        return this;\n      }\n      this.settings.thoughtEmojis[quadrant] = emojis;\n      return this;\n    }\n\n    /**\n     * Set all thought emojis\n     * @param {Object} thoughtEmojis - The thought emojis\n     * @param {string[]} thoughtEmojis.topLeft - The top-left quadrant thought emojis\n     * @param {string[]} thoughtEmojis.topRight - The top-right quadrant thought emojis\n     * @param {string[]} thoughtEmojis.bottomLeft - The bottom-left quadrant thought emojis\n     * @param {string[]} thoughtEmojis.bottomRight - The bottom-right quadrant thought emojis\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withThoughtEmojis\",\n    value: function withThoughtEmojis(thoughtEmojis) {\n      if (_typeof(thoughtEmojis) !== 'object') {\n        console.warn('[SettingsBuilder] thoughtEmojis should be an object');\n        return this;\n      }\n      this.settings.thoughtEmojis = _objectSpread(_objectSpread({}, this.settings.thoughtEmojis), thoughtEmojis);\n      return this;\n    }\n\n    /**\n     * Configure video controls\n     * @param {Object} videoControlsConfig - The video controls configuration\n     * @param {boolean} videoControlsConfig.enabled - Whether to enable video controls\n     * @param {string} videoControlsConfig.position - The position of the video controls ('center', 'bottom-center', 'top-center')\n     * @param {boolean} videoControlsConfig.autoHide - Whether to auto-hide the video controls\n     * @param {number} videoControlsConfig.autoHideDelay - The auto-hide delay in milliseconds\n     * @param {boolean} videoControlsConfig.pauseOnLightboxOnly - Whether to pause video only when lightbox opens\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withVideoControls\",\n    value: function withVideoControls(videoControlsConfig) {\n      if (_typeof(videoControlsConfig) !== 'object') {\n        console.warn('[SettingsBuilder] videoControlsConfig should be an object');\n        return this;\n      }\n      this.settings.videoControls = _objectSpread(_objectSpread({}, this.settings.videoControls), videoControlsConfig);\n      return this;\n    }\n\n    /**\n     * Configure tooltip\n     * @param {Object} tooltipConfig - The tooltip configuration\n     * @param {boolean} tooltipConfig.enabled - Whether to enable the tooltip\n     * @param {string} tooltipConfig.position - The position of the tooltip ('above-controls', 'below-controls', 'on-bubble')\n     * @param {string} tooltipConfig.text - The tooltip text\n     * @param {Object} tooltipConfig.style - The tooltip style\n     * @param {string} tooltipConfig.style.backgroundColor - The tooltip background color\n     * @param {string} tooltipConfig.style.color - The tooltip text color\n     * @param {string} tooltipConfig.style.padding - The tooltip padding\n     * @param {string} tooltipConfig.style.borderRadius - The tooltip border radius\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withTooltip\",\n    value: function withTooltip(tooltipConfig) {\n      if (_typeof(tooltipConfig) !== 'object') {\n        console.warn('[SettingsBuilder] tooltipConfig should be an object');\n        return this;\n      }\n\n      // Handle nested style object\n      if (tooltipConfig.style && _typeof(tooltipConfig.style) === 'object') {\n        tooltipConfig.style = _objectSpread(_objectSpread({}, this.settings.tooltip.style), tooltipConfig.style);\n      }\n      this.settings.tooltip = _objectSpread(_objectSpread({}, this.settings.tooltip), tooltipConfig);\n      return this;\n    }\n\n    /**\n     * Configure swipe navigation\n     * @param {Object} swipeConfig - The swipe navigation configuration\n     * @param {boolean} swipeConfig.enabled - Whether to enable swipe navigation\n     * @param {number} swipeConfig.threshold - The swipe threshold in pixels\n     * @param {string} swipeConfig.direction - The swipe direction ('vertical' or 'horizontal')\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withSwipeNavigation\",\n    value: function withSwipeNavigation(swipeConfig) {\n      if (_typeof(swipeConfig) !== 'object') {\n        console.warn('[SettingsBuilder] swipeConfig should be an object');\n        return this;\n      }\n      this.settings.swipeNavigation = _objectSpread(_objectSpread({}, this.settings.swipeNavigation), swipeConfig);\n      return this;\n    }\n\n    /**\n     * Configure north context bar\n     * @param {Object} northConfig - The north context bar configuration\n     * @param {boolean} northConfig.enabled - Whether to enable the north context bar\n     * @param {string} northConfig.content - The content of the north context bar\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withNorthContextBar\",\n    value: function withNorthContextBar(northConfig) {\n      if (_typeof(northConfig) !== 'object') {\n        console.warn('[SettingsBuilder] northConfig should be an object');\n        return this;\n      }\n      this.settings.northContextBar = _objectSpread(_objectSpread({}, this.settings.northContextBar), northConfig);\n      return this;\n    }\n\n    /**\n     * Configure south context bar\n     * @param {Object} southConfig - The south context bar configuration\n     * @param {boolean} southConfig.enabled - Whether to enable the south context bar\n     * @param {string} southConfig.content - The content of the south context bar\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withSouthContextBar\",\n    value: function withSouthContextBar(southConfig) {\n      if (_typeof(southConfig) !== 'object') {\n        console.warn('[SettingsBuilder] southConfig should be an object');\n        return this;\n      }\n      this.settings.southContextBar = _objectSpread(_objectSpread({}, this.settings.southContextBar), southConfig);\n      return this;\n    }\n\n    /**\n     * Configure coordinate system\n     * @param {Object} coordinateConfig - The coordinate system configuration\n     * @param {string} coordinateConfig.type - The coordinate system type ('absolute', 'normalized', or 'percentage')\n     * @param {boolean} coordinateConfig.storeMetadata - Whether to store container dimensions in the coordinate data\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withCoordinateSystem\",\n    value: function withCoordinateSystem(coordinateConfig) {\n      if (_typeof(coordinateConfig) !== 'object') {\n        console.warn('[SettingsBuilder] coordinateConfig should be an object');\n        return this;\n      }\n      this.settings.coordinateSystem = _objectSpread(_objectSpread({}, this.settings.coordinateSystem), coordinateConfig);\n      return this;\n    }\n\n    /**\n     * Enable or disable auto-initialization\n     * @param {boolean} enabled - Whether to enable auto-initialization\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withAutoInitialize\",\n    value: function withAutoInitialize(enabled) {\n      if (typeof enabled !== 'boolean') {\n        console.warn('[SettingsBuilder] autoInitialize should be a boolean');\n      }\n      this.settings.autoInitialize = enabled;\n      return this;\n    }\n\n    /**\n     * Configure profile bubble\n     * @param {Object} bubbleConfig - The profile bubble configuration\n     * @param {string} bubbleConfig.imageUrl - URL to the profile image\n     * @param {string} bubbleConfig.fallbackEmoji - Fallback emoji if no image is provided\n     * @param {string} bubbleConfig.size - Size of the profile bubble (CSS value)\n     * @param {string} bubbleConfig.borderColor - Border color of the profile bubble\n     * @param {string} bubbleConfig.borderWidth - Border width of the profile bubble\n     * @param {string} bubbleConfig.backgroundColor - Background color of the profile bubble\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withProfileBubble\",\n    value: function withProfileBubble(bubbleConfig) {\n      if (_typeof(bubbleConfig) !== 'object') {\n        console.warn('[SettingsBuilder] bubbleConfig should be an object');\n        return this;\n      }\n      this.settings.profileBubble = _objectSpread(_objectSpread({}, this.settings.profileBubble), bubbleConfig);\n      return this;\n    }\n\n    /**\n     * Configure overlay colors\n     * @param {Object} overlayColors - The overlay color configuration\n     * @param {string} overlayColors.background - Overlay background color\n     * @param {Object} overlayColors.quadrantGradients - Quadrant gradient colors\n     * @param {string} overlayColors.quadrantGradients.topLeft - Top-left quadrant gradient color\n     * @param {string} overlayColors.quadrantGradients.topRight - Top-right quadrant gradient color\n     * @param {string} overlayColors.quadrantGradients.bottomLeft - Bottom-left quadrant gradient color\n     * @param {string} overlayColors.quadrantGradients.bottomRight - Bottom-right quadrant gradient color\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withOverlayColors\",\n    value: function withOverlayColors(overlayColors) {\n      if (_typeof(overlayColors) !== 'object') {\n        console.warn('[SettingsBuilder] overlayColors should be an object');\n        return this;\n      }\n\n      // Handle nested quadrantGradients object\n      if (overlayColors.quadrantGradients && _typeof(overlayColors.quadrantGradients) === 'object') {\n        overlayColors.quadrantGradients = _objectSpread(_objectSpread({}, this.settings.colors.overlay.quadrantGradients), overlayColors.quadrantGradients);\n      }\n      this.settings.colors.overlay = _objectSpread(_objectSpread({}, this.settings.colors.overlay), overlayColors);\n      return this;\n    }\n\n    /**\n     * Configure lightbox colors\n     * @param {Object} lightboxColors - The lightbox color configuration\n     * @param {string} lightboxColors.background - Lightbox background color\n     * @param {string} lightboxColors.text - Lightbox text color\n     * @param {string} lightboxColors.headerBackground - Lightbox header background color\n     * @param {string} lightboxColors.buttonPrimary - Primary button color\n     * @param {string} lightboxColors.buttonSecondary - Secondary button color\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withLightboxColors\",\n    value: function withLightboxColors(lightboxColors) {\n      if (_typeof(lightboxColors) !== 'object') {\n        console.warn('[SettingsBuilder] lightboxColors should be an object');\n        return this;\n      }\n      this.settings.colors.lightbox = _objectSpread(_objectSpread({}, this.settings.colors.lightbox), lightboxColors);\n      return this;\n    }\n\n    /**\n     * Configure all colors at once\n     * @param {Object} colorConfig - The color configuration\n     * @param {Object} colorConfig.overlay - Overlay color configuration\n     * @param {Object} colorConfig.lightbox - Lightbox color configuration\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withColors\",\n    value: function withColors(colorConfig) {\n      if (_typeof(colorConfig) !== 'object') {\n        console.warn('[SettingsBuilder] colorConfig should be an object');\n        return this;\n      }\n\n      // Handle nested overlay object\n      if (colorConfig.overlay && _typeof(colorConfig.overlay) === 'object') {\n        // Handle nested quadrantGradients object\n        if (colorConfig.overlay.quadrantGradients && _typeof(colorConfig.overlay.quadrantGradients) === 'object') {\n          colorConfig.overlay.quadrantGradients = _objectSpread(_objectSpread({}, this.settings.colors.overlay.quadrantGradients), colorConfig.overlay.quadrantGradients);\n        }\n        colorConfig.overlay = _objectSpread(_objectSpread({}, this.settings.colors.overlay), colorConfig.overlay);\n      }\n\n      // Handle nested lightbox object\n      if (colorConfig.lightbox && _typeof(colorConfig.lightbox) === 'object') {\n        colorConfig.lightbox = _objectSpread(_objectSpread({}, this.settings.colors.lightbox), colorConfig.lightbox);\n      }\n      this.settings.colors = _objectSpread(_objectSpread({}, this.settings.colors), colorConfig);\n      return this;\n    }\n\n    /**\n     * Configure emoji sizes\n     * @param {Object} sizeConfig - The emoji size configuration\n     * @param {string} sizeConfig.default - The default emoji size (CSS value)\n     * @param {string} sizeConfig.active - The active emoji size (CSS value)\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withEmojiSizes\",\n    value: function withEmojiSizes(sizeConfig) {\n      if (_typeof(sizeConfig) !== 'object') {\n        console.warn('[SettingsBuilder] sizeConfig should be an object');\n        return this;\n      }\n      this.settings.emojiSizes = _objectSpread(_objectSpread({}, this.settings.emojiSizes), sizeConfig);\n      return this;\n    }\n\n    /**\n     * Configure video player API integration\n     * @param {Object} apiConfig - The API configuration\n     * @param {boolean} apiConfig.enabled - Whether to enable video player API integration\n     * @param {Function} apiConfig.playMethod - Method to play the video\n     * @param {Function} apiConfig.pauseMethod - Method to pause the video\n     * @param {Function} apiConfig.seekMethod - Method to seek the video\n     * @param {Function} apiConfig.getCurrentTimeMethod - Method to get current time\n     * @param {Function} apiConfig.getDurationMethod - Method to get duration\n     * @param {Function} apiConfig.getVideoIdMethod - Method to get video ID\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withVideoPlayerApi\",\n    value: function withVideoPlayerApi(apiConfig) {\n      if (_typeof(apiConfig) !== 'object') {\n        console.warn('[SettingsBuilder] apiConfig should be an object');\n        return this;\n      }\n      this.settings.videoPlayerApi = _objectSpread(_objectSpread({}, this.settings.videoPlayerApi), apiConfig);\n      return this;\n    }\n\n    /**\n     * Configure with a VideoPlayerAdapter\n     * @param {VideoPlayerAdapter} adapter - The video player adapter instance\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"withVideoPlayerAdapter\",\n    value: function withVideoPlayerAdapter(adapter) {\n      if (!adapter) {\n        console.warn('[SettingsBuilder] adapter should be a valid VideoPlayerAdapter instance');\n        return this;\n      }\n      this.settings.videoPlayerApi = _objectSpread(_objectSpread({}, this.settings.videoPlayerApi), {}, {\n        enabled: true,\n        adapter: adapter\n      });\n      return this;\n    }\n\n    /**\n     * Set callback for overlay activation\n     * @param {Function} callback - The callback function\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"onOverlayActivate\",\n    value: function onOverlayActivate(callback) {\n      if (typeof callback !== 'function') {\n        console.warn('[SettingsBuilder] callback should be a function');\n        return this;\n      }\n      this.settings.callbacks.onOverlayActivate = callback;\n      return this;\n    }\n\n    /**\n     * Set callback for throw-down initiation\n     * @param {Function} callback - The callback function\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"onThrowDownInitiate\",\n    value: function onThrowDownInitiate(callback) {\n      if (typeof callback !== 'function') {\n        console.warn('[SettingsBuilder] callback should be a function');\n        return this;\n      }\n      this.settings.callbacks.onThrowDownInitiate = callback;\n      return this;\n    }\n\n    /**\n     * Set callback for throw-down confirmation\n     * @param {Function} callback - The callback function\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"onThrowDownConfirm\",\n    value: function onThrowDownConfirm(callback) {\n      if (typeof callback !== 'function') {\n        console.warn('[SettingsBuilder] callback should be a function');\n        return this;\n      }\n      this.settings.callbacks.onThrowDownConfirm = callback;\n      return this;\n    }\n\n    /**\n     * Set callback for throw-down cancellation\n     * @param {Function} callback - The callback function\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"onThrowDownCancel\",\n    value: function onThrowDownCancel(callback) {\n      if (typeof callback !== 'function') {\n        console.warn('[SettingsBuilder] callback should be a function');\n        return this;\n      }\n      this.settings.callbacks.onThrowDownCancel = callback;\n      return this;\n    }\n\n    /**\n     * Set callback for video control actions\n     * @param {Function} callback - The callback function\n     * @returns {SettingsBuilder} The builder instance for chaining\n     */\n  }, {\n    key: \"onVideoControl\",\n    value: function onVideoControl(callback) {\n      if (typeof callback !== 'function') {\n        console.warn('[SettingsBuilder] callback should be a function');\n        return this;\n      }\n      this.settings.callbacks.onVideoControl = callback;\n      return this;\n    }\n\n    /**\n     * Build the settings object\n     * @returns {Object} The settings object\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      // Validate settings\n      this.validateSettings();\n\n      // Return a copy of the settings to prevent modification\n      return JSON.parse(JSON.stringify(this.settings));\n    }\n\n    /**\n     * Validate settings\n     * @private\n     */\n  }, {\n    key: \"validateSettings\",\n    value: function validateSettings() {\n      // Check required settings\n      if (!this.settings.containerId) {\n        console.warn('[SettingsBuilder] containerId is required, using default: \"quad-tap-container\"');\n        this.settings.containerId = 'quad-tap-container';\n      }\n      if (!this.settings.videoSelector) {\n        console.warn('[SettingsBuilder] videoSelector is required, using default: \"video\"');\n        this.settings.videoSelector = 'video';\n      }\n\n      // Validate video controls position\n      var validPositions = ['center', 'bottom-center', 'top-center'];\n      if (this.settings.videoControls.enabled && !validPositions.includes(this.settings.videoControls.position)) {\n        console.warn(\"[SettingsBuilder] Invalid video controls position: \".concat(this.settings.videoControls.position, \", using default: \\\"center\\\"\"));\n        this.settings.videoControls.position = 'center';\n      }\n\n      // Validate tooltip position\n      var validTooltipPositions = ['above-controls', 'below-controls', 'on-bubble'];\n      if (this.settings.tooltip.enabled && !validTooltipPositions.includes(this.settings.tooltip.position)) {\n        console.warn(\"[SettingsBuilder] Invalid tooltip position: \".concat(this.settings.tooltip.position, \", using default: \\\"above-controls\\\"\"));\n        this.settings.tooltip.position = 'above-controls';\n      }\n\n      // Validate swipe direction\n      var validSwipeDirections = ['vertical', 'horizontal'];\n      if (this.settings.swipeNavigation.enabled && !validSwipeDirections.includes(this.settings.swipeNavigation.direction)) {\n        console.warn(\"[SettingsBuilder] Invalid swipe direction: \".concat(this.settings.swipeNavigation.direction, \", using default: \\\"vertical\\\"\"));\n        this.settings.swipeNavigation.direction = 'vertical';\n      }\n\n      // Validate coordinate system type\n      var validCoordinateTypes = ['absolute', 'normalized', 'percentage'];\n      if (!validCoordinateTypes.includes(this.settings.coordinateSystem.type)) {\n        console.warn(\"[SettingsBuilder] Invalid coordinate system type: \".concat(this.settings.coordinateSystem.type, \", using default: \\\"percentage\\\"\"));\n        this.settings.coordinateSystem.type = 'percentage';\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SettingsBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/SettingsBuilder.js\n");

/***/ }),

/***/ "./src/adapters/VideoPlayerAdapter.js":
/*!********************************************!*\
  !*** ./src/adapters/VideoPlayerAdapter.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), c(GeneratorFunctionPrototype, u, GeneratorFunction.displayName = \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * VideoPlayerAdapter provides a unified interface for interacting with different video player APIs.\n * This allows QuadTap to work with various video players like HTML5 video, YouTube, Vimeo, or custom players.\n */\nvar VideoPlayerAdapter = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param {Object} config - The adapter configuration\n   * @param {HTMLVideoElement|Object} config.videoElement - The video element or player object\n   * @param {Object} config.api - API configuration\n   * @param {Function} config.api.playMethod - Method to play the video\n   * @param {Function} config.api.pauseMethod - Method to pause the video\n   * @param {Function} config.api.seekMethod - Method to seek the video\n   * @param {Function} config.api.getCurrentTimeMethod - Method to get current time\n   * @param {Function} config.api.getDurationMethod - Method to get duration\n   * @param {Function} config.api.isPlayingMethod - Method to check if video is playing\n   * @param {Function} config.api.getVideoIdMethod - Method to get video ID\n   * @param {boolean} config.debug - Whether to enable debug logging\n   */\n  function VideoPlayerAdapter(config) {\n    _classCallCheck(this, VideoPlayerAdapter);\n    this.videoElement = config.videoElement;\n    this.api = config.api;\n    this.debug = config.debug || false;\n    this.savedPlayingState = false;\n    this.log('VideoPlayerAdapter initialized');\n  }\n\n  /**\n   * Log a message if debug is enabled\n   * @param {string} message - The message to log\n   * @private\n   */\n  return _createClass(VideoPlayerAdapter, [{\n    key: \"log\",\n    value: function log(message) {\n      if (this.debug) {\n        console.log(\"[VideoPlayerAdapter] \".concat(message));\n      }\n    }\n\n    /**\n     * Play the video\n     * @returns {Promise<void>} A promise that resolves when the video starts playing\n     */\n  }, {\n    key: \"play\",\n    value: (function () {\n      var _play = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              this.log('Playing video');\n              result = this.api.playMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 6;\n              return result;\n            case 6:\n              _context.t0 = _context.sent;\n              _context.next = 10;\n              break;\n            case 9:\n              _context.t0 = result;\n            case 10:\n              return _context.abrupt(\"return\", _context.t0);\n            case 13:\n              _context.prev = 13;\n              _context.t1 = _context[\"catch\"](0);\n              this.log(\"Error playing video: \".concat(_context.t1.message));\n              throw _context.t1;\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 13]]);\n      }));\n      function play() {\n        return _play.apply(this, arguments);\n      }\n      return play;\n    }()\n    /**\n     * Pause the video\n     * @returns {Promise<void>} A promise that resolves when the video is paused\n     */\n    )\n  }, {\n    key: \"pause\",\n    value: (function () {\n      var _pause = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              this.log('Pausing video');\n              result = this.api.pauseMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context2.next = 9;\n                break;\n              }\n              _context2.next = 6;\n              return result;\n            case 6:\n              _context2.t0 = _context2.sent;\n              _context2.next = 10;\n              break;\n            case 9:\n              _context2.t0 = result;\n            case 10:\n              return _context2.abrupt(\"return\", _context2.t0);\n            case 13:\n              _context2.prev = 13;\n              _context2.t1 = _context2[\"catch\"](0);\n              this.log(\"Error pausing video: \".concat(_context2.t1.message));\n              throw _context2.t1;\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 13]]);\n      }));\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n      return pause;\n    }()\n    /**\n     * Seek to a specific time in the video\n     * @param {number} time - The time to seek to in seconds\n     * @returns {Promise<void>} A promise that resolves when the seek operation is complete\n     */\n    )\n  }, {\n    key: \"seek\",\n    value: (function () {\n      var _seek = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(time) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              this.log(\"Seeking to \".concat(time, \" seconds\"));\n              result = this.api.seekMethod(this.videoElement, time);\n              if (!(result instanceof Promise)) {\n                _context3.next = 9;\n                break;\n              }\n              _context3.next = 6;\n              return result;\n            case 6:\n              _context3.t0 = _context3.sent;\n              _context3.next = 10;\n              break;\n            case 9:\n              _context3.t0 = result;\n            case 10:\n              return _context3.abrupt(\"return\", _context3.t0);\n            case 13:\n              _context3.prev = 13;\n              _context3.t1 = _context3[\"catch\"](0);\n              this.log(\"Error seeking video: \".concat(_context3.t1.message));\n              throw _context3.t1;\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 13]]);\n      }));\n      function seek(_x) {\n        return _seek.apply(this, arguments);\n      }\n      return seek;\n    }()\n    /**\n     * Get the current time of the video\n     * @returns {Promise<number>} A promise that resolves with the current time in seconds\n     */\n    )\n  }, {\n    key: \"getCurrentTime\",\n    value: (function () {\n      var _getCurrentTime = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              result = this.api.getCurrentTimeMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context4.next = 8;\n                break;\n              }\n              _context4.next = 5;\n              return result;\n            case 5:\n              _context4.t0 = _context4.sent;\n              _context4.next = 9;\n              break;\n            case 8:\n              _context4.t0 = result;\n            case 9:\n              return _context4.abrupt(\"return\", _context4.t0);\n            case 12:\n              _context4.prev = 12;\n              _context4.t1 = _context4[\"catch\"](0);\n              this.log(\"Error getting current time: \".concat(_context4.t1.message));\n              throw _context4.t1;\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n      function getCurrentTime() {\n        return _getCurrentTime.apply(this, arguments);\n      }\n      return getCurrentTime;\n    }()\n    /**\n     * Get the duration of the video\n     * @returns {Promise<number>} A promise that resolves with the duration in seconds\n     */\n    )\n  }, {\n    key: \"getDuration\",\n    value: (function () {\n      var _getDuration = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              result = this.api.getDurationMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context5.next = 8;\n                break;\n              }\n              _context5.next = 5;\n              return result;\n            case 5:\n              _context5.t0 = _context5.sent;\n              _context5.next = 9;\n              break;\n            case 8:\n              _context5.t0 = result;\n            case 9:\n              return _context5.abrupt(\"return\", _context5.t0);\n            case 12:\n              _context5.prev = 12;\n              _context5.t1 = _context5[\"catch\"](0);\n              this.log(\"Error getting duration: \".concat(_context5.t1.message));\n              throw _context5.t1;\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[0, 12]]);\n      }));\n      function getDuration() {\n        return _getDuration.apply(this, arguments);\n      }\n      return getDuration;\n    }()\n    /**\n     * Check if the video is currently playing\n     * @returns {Promise<boolean>} A promise that resolves with true if the video is playing, false otherwise\n     */\n    )\n  }, {\n    key: \"isPlaying\",\n    value: (function () {\n      var _isPlaying = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              result = this.api.isPlayingMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context6.next = 8;\n                break;\n              }\n              _context6.next = 5;\n              return result;\n            case 5:\n              _context6.t0 = _context6.sent;\n              _context6.next = 9;\n              break;\n            case 8:\n              _context6.t0 = result;\n            case 9:\n              return _context6.abrupt(\"return\", _context6.t0);\n            case 12:\n              _context6.prev = 12;\n              _context6.t1 = _context6[\"catch\"](0);\n              this.log(\"Error checking if video is playing: \".concat(_context6.t1.message));\n              throw _context6.t1;\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 12]]);\n      }));\n      function isPlaying() {\n        return _isPlaying.apply(this, arguments);\n      }\n      return isPlaying;\n    }()\n    /**\n     * Get the video ID\n     * @returns {Promise<string>} A promise that resolves with the video ID\n     */\n    )\n  }, {\n    key: \"getVideoId\",\n    value: (function () {\n      var _getVideoId = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              result = this.api.getVideoIdMethod(this.videoElement);\n              if (!(result instanceof Promise)) {\n                _context7.next = 8;\n                break;\n              }\n              _context7.next = 5;\n              return result;\n            case 5:\n              _context7.t0 = _context7.sent;\n              _context7.next = 9;\n              break;\n            case 8:\n              _context7.t0 = result;\n            case 9:\n              return _context7.abrupt(\"return\", _context7.t0);\n            case 12:\n              _context7.prev = 12;\n              _context7.t1 = _context7[\"catch\"](0);\n              this.log(\"Error getting video ID: \".concat(_context7.t1.message));\n              throw _context7.t1;\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 12]]);\n      }));\n      function getVideoId() {\n        return _getVideoId.apply(this, arguments);\n      }\n      return getVideoId;\n    }()\n    /**\n     * Save the current playing state\n     * @returns {Promise<void>} A promise that resolves when the state is saved\n     */\n    )\n  }, {\n    key: \"savePlayingState\",\n    value: (function () {\n      var _savePlayingState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              this.log('Saving playing state');\n              _context8.next = 4;\n              return this.isPlaying();\n            case 4:\n              this.savedPlayingState = _context8.sent;\n              this.log(\"Saved playing state: \".concat(this.savedPlayingState));\n              _context8.next = 12;\n              break;\n            case 8:\n              _context8.prev = 8;\n              _context8.t0 = _context8[\"catch\"](0);\n              this.log(\"Error saving playing state: \".concat(_context8.t0.message));\n              throw _context8.t0;\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 8]]);\n      }));\n      function savePlayingState() {\n        return _savePlayingState.apply(this, arguments);\n      }\n      return savePlayingState;\n    }()\n    /**\n     * Restore the last saved playing state\n     * @returns {Promise<void>} A promise that resolves when the state is restored\n     */\n    )\n  }, {\n    key: \"restorePlayingState\",\n    value: (function () {\n      var _restorePlayingState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              this.log(\"Restoring playing state: \".concat(this.savedPlayingState));\n              if (!this.savedPlayingState) {\n                _context9.next = 7;\n                break;\n              }\n              _context9.next = 5;\n              return this.play();\n            case 5:\n              _context9.next = 9;\n              break;\n            case 7:\n              _context9.next = 9;\n              return this.pause();\n            case 9:\n              _context9.next = 15;\n              break;\n            case 11:\n              _context9.prev = 11;\n              _context9.t0 = _context9[\"catch\"](0);\n              this.log(\"Error restoring playing state: \".concat(_context9.t0.message));\n              throw _context9.t0;\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 11]]);\n      }));\n      function restorePlayingState() {\n        return _restorePlayingState.apply(this, arguments);\n      }\n      return restorePlayingState;\n    }()\n    /**\n     * Get video metadata\n     * @returns {Promise<Object>} A promise that resolves with the video metadata\n     */\n    )\n  }, {\n    key: \"getMetadata\",\n    value: (function () {\n      var _getMetadata = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee0() {\n        var _yield$Promise$all, _yield$Promise$all2, currentTime, duration, videoId;\n        return _regeneratorRuntime().wrap(function _callee0$(_context0) {\n          while (1) switch (_context0.prev = _context0.next) {\n            case 0:\n              _context0.prev = 0;\n              _context0.next = 3;\n              return Promise.all([this.getCurrentTime(), this.getDuration(), this.getVideoId()]);\n            case 3:\n              _yield$Promise$all = _context0.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              currentTime = _yield$Promise$all2[0];\n              duration = _yield$Promise$all2[1];\n              videoId = _yield$Promise$all2[2];\n              return _context0.abrupt(\"return\", {\n                currentTime: currentTime,\n                duration: duration,\n                videoId: videoId,\n                timestamp: new Date().toISOString()\n              });\n            case 11:\n              _context0.prev = 11;\n              _context0.t0 = _context0[\"catch\"](0);\n              this.log(\"Error getting metadata: \".concat(_context0.t0.message));\n              throw _context0.t0;\n            case 15:\n            case \"end\":\n              return _context0.stop();\n          }\n        }, _callee0, this, [[0, 11]]);\n      }));\n      function getMetadata() {\n        return _getMetadata.apply(this, arguments);\n      }\n      return getMetadata;\n    }()\n    /**\n     * Create an adapter for a standard HTML5 video element\n     * @param {HTMLVideoElement} videoElement - The video element\n     * @param {boolean} debug - Whether to enable debug logging\n     * @returns {VideoPlayerAdapter} A new VideoPlayerAdapter instance\n     * @static\n     */\n    )\n  }], [{\n    key: \"forHtml5Video\",\n    value: function forHtml5Video(videoElement) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new VideoPlayerAdapter({\n        videoElement: videoElement,\n        api: {\n          playMethod: function playMethod(video) {\n            return video.play();\n          },\n          pauseMethod: function pauseMethod(video) {\n            return video.pause();\n          },\n          seekMethod: function seekMethod(video, time) {\n            video.currentTime = time;\n          },\n          getCurrentTimeMethod: function getCurrentTimeMethod(video) {\n            return video.currentTime;\n          },\n          getDurationMethod: function getDurationMethod(video) {\n            return video.duration;\n          },\n          isPlayingMethod: function isPlayingMethod(video) {\n            return !video.paused;\n          },\n          getVideoIdMethod: function getVideoIdMethod(video) {\n            return video.src || video.currentSrc || video.id;\n          }\n        },\n        debug: debug\n      });\n    }\n\n    /**\n     * Create an adapter for YouTube player\n     * @param {Object} youtubePlayer - The YouTube player instance\n     * @param {boolean} debug - Whether to enable debug logging\n     * @returns {VideoPlayerAdapter} A new VideoPlayerAdapter instance\n     * @static\n     */\n  }, {\n    key: \"forYouTube\",\n    value: function forYouTube(youtubePlayer) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new VideoPlayerAdapter({\n        videoElement: youtubePlayer,\n        api: {\n          playMethod: function playMethod(player) {\n            return player.playVideo();\n          },\n          pauseMethod: function pauseMethod(player) {\n            return player.pauseVideo();\n          },\n          seekMethod: function seekMethod(player, time) {\n            return player.seekTo(time);\n          },\n          getCurrentTimeMethod: function getCurrentTimeMethod(player) {\n            return player.getCurrentTime();\n          },\n          getDurationMethod: function getDurationMethod(player) {\n            return player.getDuration();\n          },\n          isPlayingMethod: function isPlayingMethod(player) {\n            return player.getPlayerState() === 1;\n          },\n          // 1 = playing\n          getVideoIdMethod: function getVideoIdMethod(player) {\n            // Extract video ID from URL\n            var url = player.getVideoUrl();\n            var match = url.match(/[?&]v=([^&]+)/);\n            return match ? match[1] : '';\n          }\n        },\n        debug: debug\n      });\n    }\n\n    /**\n     * Create an adapter for Vimeo player\n     * @param {Object} vimeoPlayer - The Vimeo player instance\n     * @param {boolean} debug - Whether to enable debug logging\n     * @returns {VideoPlayerAdapter} A new VideoPlayerAdapter instance\n     * @static\n     */\n  }, {\n    key: \"forVimeo\",\n    value: function forVimeo(vimeoPlayer) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new VideoPlayerAdapter({\n        videoElement: vimeoPlayer,\n        api: {\n          playMethod: function playMethod(player) {\n            return player.play();\n          },\n          pauseMethod: function pauseMethod(player) {\n            return player.pause();\n          },\n          seekMethod: function seekMethod(player, time) {\n            return player.setCurrentTime(time);\n          },\n          getCurrentTimeMethod: function getCurrentTimeMethod(player) {\n            return player.getCurrentTime();\n          },\n          getDurationMethod: function getDurationMethod(player) {\n            return player.getDuration();\n          },\n          isPlayingMethod: function () {\n            var _isPlayingMethod = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee1(player) {\n              var paused;\n              return _regeneratorRuntime().wrap(function _callee1$(_context1) {\n                while (1) switch (_context1.prev = _context1.next) {\n                  case 0:\n                    _context1.next = 2;\n                    return player.getPaused();\n                  case 2:\n                    paused = _context1.sent;\n                    return _context1.abrupt(\"return\", !paused);\n                  case 4:\n                  case \"end\":\n                    return _context1.stop();\n                }\n              }, _callee1);\n            }));\n            function isPlayingMethod(_x2) {\n              return _isPlayingMethod.apply(this, arguments);\n            }\n            return isPlayingMethod;\n          }(),\n          getVideoIdMethod: function getVideoIdMethod(player) {\n            return player.getVideoId();\n          }\n        },\n        debug: debug\n      });\n    }\n\n    /**\n     * Create a custom adapter\n     * @param {Object} config - The adapter configuration\n     * @returns {VideoPlayerAdapter} A new VideoPlayerAdapter instance\n     * @static\n     */\n  }, {\n    key: \"custom\",\n    value: function custom(config) {\n      return new VideoPlayerAdapter({\n        videoElement: config.videoElement,\n        api: {\n          playMethod: config.api.playMethod,\n          pauseMethod: config.api.pauseMethod,\n          seekMethod: config.api.seekMethod,\n          getCurrentTimeMethod: config.api.getCurrentTimeMethod,\n          getDurationMethod: config.api.getDurationMethod,\n          isPlayingMethod: config.api.isPlayingMethod || function () {\n            return false;\n          },\n          getVideoIdMethod: config.api.getVideoIdMethod || function () {\n            return '';\n          }\n        },\n        debug: config.debug || false\n      });\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoPlayerAdapter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/adapters/VideoPlayerAdapter.js\n");

/***/ }),

/***/ "./src/components/ControlStrip.js":
/*!****************************************!*\
  !*** ./src/components/ControlStrip.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyControlStripLayout: () => (/* binding */ applyControlStripLayout),\n/* harmony export */   copyToClipboard: () => (/* binding */ copyToClipboard),\n/* harmony export */   createControlStrip: () => (/* binding */ createControlStrip),\n/* harmony export */   hideControlStrip: () => (/* binding */ hideControlStrip),\n/* harmony export */   showControlStrip: () => (/* binding */ showControlStrip),\n/* harmony export */   showTooltip: () => (/* binding */ showTooltip),\n/* harmony export */   updatePlayPauseButton: () => (/* binding */ updatePlayPauseButton)\n/* harmony export */ });\n/**\n * ControlStrip Component\n * \n * This component creates and manages the video control strip that appears\n * at the center of the overlay. It follows the positioning requirements\n * specified in the SPEC.md document.\n */\n\n// Control strip styles as JavaScript objects\nvar controlStripStyles = {\n  base: {\n    width: '80%',\n    maxWidth: '400px',\n    padding: '8px 12px',\n    borderRadius: '24px',\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)',\n    transition: 'opacity 0.3s ease'\n  },\n  overlay: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)'\n  },\n  lightbox: {\n    position: 'static',\n    top: '',\n    left: '',\n    transform: '',\n    margin: '20px auto'\n  },\n  button: {\n    background: 'none',\n    border: 'none',\n    color: 'white',\n    fontSize: '18px',\n    padding: '8px 12px',\n    cursor: 'pointer',\n    borderRadius: '50%',\n    width: '40px',\n    height: '40px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    transition: 'background-color 0.2s ease, font-size 0.3s ease, width 0.3s ease, height 0.3s ease'\n  },\n  buttonHover: {\n    backgroundColor: 'rgba(255, 255, 255, 0.2)'\n  },\n  tooltip: {\n    position: 'absolute',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    color: 'white',\n    padding: '5px 10px',\n    borderRadius: '4px',\n    fontSize: '14px',\n    zIndex: '2000',\n    pointerEvents: 'none',\n    opacity: '0',\n    transition: 'opacity 0.3s ease'\n  }\n};\n\n/**\n * Apply styles to an element\n * @param {HTMLElement} element - The element to apply styles to\n * @param {Object} styles - The styles to apply\n */\nfunction applyStyles(element, styles) {\n  Object.assign(element.style, styles);\n}\n\n/**\n * Apply layout styles to the control strip\n * @param {HTMLElement} controlStrip - The control strip element\n * @param {boolean} isLightbox - Whether the control strip is in a lightbox\n */\nfunction applyControlStripLayout(controlStrip, isLightbox) {\n  // Apply base styles\n  applyStyles(controlStrip, controlStripStyles.base);\n\n  // Apply positioning styles based on context\n  if (isLightbox) {\n    applyStyles(controlStrip, controlStripStyles.lightbox);\n  } else {\n    applyStyles(controlStrip, controlStripStyles.overlay);\n  }\n}\n\n/**\n * Creates a control strip element and positions it correctly\n * @param {Object} options - Configuration options\n * @param {HTMLElement} options.overlay - The overlay element to attach the control strip to\n * @param {Function} options.onPlay - Callback for play button click\n * @param {Function} options.onPause - Callback for pause button click\n * @param {Function} options.onRewind - Callback for rewind button click\n * @param {Function} options.onForward - Callback for forward button click\n * @param {Function} options.onShare - Callback for share button click\n * @param {Function} options.onCopyUrl - Callback for copy URL button click\n * @param {number} options.rewindTime - Time in seconds to rewind (default: 30)\n * @param {number} options.forwardTime - Time in seconds to forward (default: 30)\n * @param {boolean} options.debug - Enable debug mode\n * @param {boolean} options.showAllButtons - Show all buttons including share and copy URL (default: false)\n * @param {boolean} options.isLightbox - Whether this control strip is for a lightbox (default: false)\n * @returns {HTMLElement} The created control strip element\n */\nfunction createControlStrip(options) {\n  var overlay = options.overlay,\n    onPlay = options.onPlay,\n    onPause = options.onPause,\n    onRewind = options.onRewind,\n    onForward = options.onForward,\n    onShare = options.onShare,\n    onCopyUrl = options.onCopyUrl,\n    _options$rewindTime = options.rewindTime,\n    rewindTime = _options$rewindTime === void 0 ? 30 : _options$rewindTime,\n    _options$forwardTime = options.forwardTime,\n    forwardTime = _options$forwardTime === void 0 ? 30 : _options$forwardTime,\n    _options$debug = options.debug,\n    debug = _options$debug === void 0 ? false : _options$debug,\n    _options$showAllButto = options.showAllButtons,\n    showAllButtons = _options$showAllButto === void 0 ? false : _options$showAllButto,\n    _options$isLightbox = options.isLightbox,\n    isLightbox = _options$isLightbox === void 0 ? false : _options$isLightbox;\n\n  // Create the control strip element\n  var controlStrip = document.createElement('div');\n\n  // Apply styles directly using our style objects\n  applyControlStripLayout(controlStrip, isLightbox);\n\n  // Ensure proper z-index (at least 10 higher than overlay) for overlay control strip\n  if (!isLightbox) {\n    var overlayZIndex = parseInt(getComputedStyle(overlay).zIndex) || 1000;\n    controlStrip.style.zIndex = (overlayZIndex + 10).toString();\n  }\n\n  // Create control buttons\n  var rewindButton = createButton('⟲' + rewindTime, 'Rewind ' + rewindTime + ' seconds', onRewind);\n  var playPauseButton = createButton('▶', 'Play/Pause', function (evt) {\n    var isPlaying = playPauseButton.textContent === '▶';\n    playPauseButton.textContent = isPlaying ? '❚❚' : '▶';\n    if (isPlaying) {\n      onPlay(evt);\n    } else {\n      onPause(evt);\n    }\n  });\n  var forwardButton = createButton('⟳' + forwardTime, 'Forward ' + forwardTime + ' seconds', onForward);\n\n  // Create share button\n  var shareButton = createButton('⤴', 'Share', function (evt) {\n    evt.stopPropagation();\n    if (onShare) {\n      // Use the provided callback\n      onShare(evt);\n    } else {\n      // Default share functionality\n      var shareUrl = window.location.href;\n\n      // Try to use the Web Share API if available\n      if (navigator.share) {\n        navigator.share({\n          title: 'Check out this video moment',\n          url: shareUrl\n        })[\"catch\"](function (err) {\n          console.error('Error sharing:', err);\n        });\n      } else {\n        // Fallback to copying to clipboard\n        copyToClipboard(shareUrl);\n        showTooltip(shareButton, 'Link copied!');\n      }\n    }\n  });\n\n  // Create copy URL button\n  var copyButton = createButton('⧉', 'Copy URL', function (evt) {\n    evt.stopPropagation();\n    if (onCopyUrl) {\n      // Use the provided callback\n      onCopyUrl(evt);\n    } else {\n      // Default copy URL functionality\n      var url = window.location.href;\n      copyToClipboard(url);\n      showTooltip(copyButton, 'Link copied!');\n    }\n  });\n\n  // Add buttons to control strip\n  controlStrip.appendChild(rewindButton);\n  controlStrip.appendChild(playPauseButton);\n  controlStrip.appendChild(forwardButton);\n\n  // Only add share and copy buttons if showAllButtons is true or we're in a lightbox context\n  if (showAllButtons || isLightbox) {\n    controlStrip.appendChild(shareButton);\n    controlStrip.appendChild(copyButton);\n  }\n\n  // Prevent clicks from dismissing overlay\n  controlStrip.addEventListener('click', function (evt) {\n    evt.stopPropagation();\n    if (debug) console.log('[QuadTap] Control strip clicked, propagation stopped');\n  });\n\n  // Add to overlay as direct child\n  overlay.appendChild(controlStrip);\n\n  // Set up auto-fade for overlay control strip (not for lightbox)\n  if (!isLightbox) {\n    var fadeTimeout;\n    var fadeControls = function fadeControls() {\n      controlStrip.style.opacity = '0.5';\n    };\n\n    // Show controls at full opacity on hover\n    controlStrip.addEventListener('mouseenter', function () {\n      clearTimeout(fadeTimeout);\n      controlStrip.style.opacity = '1';\n    });\n\n    // Fade controls when mouse leaves\n    controlStrip.addEventListener('mouseleave', function () {\n      clearTimeout(fadeTimeout);\n      fadeTimeout = setTimeout(fadeControls, 2000);\n    });\n\n    // Initial fade after 2 seconds\n    controlStrip.style.opacity = '1';\n    fadeTimeout = setTimeout(fadeControls, 2000);\n  }\n\n  // Log positioning information if debug is enabled\n  if (debug) {\n    console.log('[QuadTap] Control strip created with positioning:', {\n      isLightbox: isLightbox,\n      className: controlStrip.className,\n      zIndex: controlStrip.style.zIndex\n    });\n\n    // Add a resize observer to log position changes\n    if (!isLightbox) {\n      var resizeObserver = new ResizeObserver(function () {\n        var rect = controlStrip.getBoundingClientRect();\n        var overlayRect = overlay.getBoundingClientRect();\n\n        // Calculate actual percentage position\n        var actualTopPercent = (rect.top - overlayRect.top + rect.height / 2) / overlayRect.height * 100;\n        var actualLeftPercent = (rect.left - overlayRect.left + rect.width / 2) / overlayRect.width * 100;\n        console.log('[QuadTap] Control strip position after resize:', {\n          topPercent: actualTopPercent.toFixed(2) + '%',\n          leftPercent: actualLeftPercent.toFixed(2) + '%',\n          width: rect.width,\n          height: rect.height\n        });\n      });\n      resizeObserver.observe(overlay);\n    }\n  }\n  return controlStrip;\n}\n\n/**\n * Helper function to create a button for the control strip\n * @param {string} text - Button text\n * @param {string} ariaLabel - Accessibility label\n * @param {Function} onClick - Click handler\n * @returns {HTMLElement} The created button\n */\nfunction createButton(text, ariaLabel, onClick) {\n  var button = document.createElement('button');\n  applyStyles(button, controlStripStyles.button);\n  button.textContent = text;\n  button.setAttribute('aria-label', ariaLabel);\n\n  // Add hover effect\n  button.addEventListener('mouseenter', function () {\n    applyStyles(button, controlStripStyles.buttonHover);\n  });\n  button.addEventListener('mouseleave', function () {\n    button.style.backgroundColor = '';\n  });\n\n  // Click handler\n  button.addEventListener('click', onClick);\n  return button;\n}\n\n/**\n * Updates the play/pause button state\n * @param {HTMLElement} controlStrip - The control strip element\n * @param {boolean} isPlaying - Whether the video is currently playing\n */\nfunction updatePlayPauseButton(controlStrip, isPlaying) {\n  var playPauseButton = controlStrip.querySelector('button:nth-child(2)');\n  if (playPauseButton) {\n    playPauseButton.textContent = isPlaying ? '❚❚' : '▶';\n  }\n}\n\n/**\n * Shows the control strip\n * @param {HTMLElement} controlStrip - The control strip element\n */\nfunction showControlStrip(controlStrip) {\n  controlStrip.style.display = 'flex';\n  controlStrip.style.opacity = '1';\n\n  // Set up fade timeout if it's an overlay control strip\n  if (controlStrip.classList.contains('qt-control-strip--overlay')) {\n    setTimeout(function () {\n      controlStrip.style.opacity = '0.5';\n    }, 2000);\n  }\n}\n\n/**\n * Hides the control strip\n * @param {HTMLElement} controlStrip - The control strip element\n */\nfunction hideControlStrip(controlStrip) {\n  controlStrip.style.opacity = '0';\n  setTimeout(function () {\n    controlStrip.style.display = 'none';\n  }, 300); // Match the transition duration\n}\n\n/**\n * Helper function to copy text to clipboard\n * @param {string} text - Text to copy\n */\nfunction copyToClipboard(text) {\n  // Use the Clipboard API if available\n  if (navigator.clipboard && navigator.clipboard.writeText) {\n    navigator.clipboard.writeText(text)[\"catch\"](function (err) {\n      console.error('Failed to copy text: ', err);\n    });\n    return;\n  }\n\n  // Fallback for older browsers\n  var textarea = document.createElement('textarea');\n  textarea.value = text;\n  textarea.style.position = 'fixed'; // Prevent scrolling to bottom\n  document.body.appendChild(textarea);\n  textarea.select();\n  try {\n    document.execCommand('copy');\n  } catch (err) {\n    console.error('Failed to copy text: ', err);\n  }\n  document.body.removeChild(textarea);\n}\n\n/**\n * Shows a tooltip near an element\n * @param {HTMLElement} element - Element to show tooltip near\n * @param {string} message - Tooltip message\n */\nfunction showTooltip(element, message) {\n  // Create tooltip element\n  var tooltip = document.createElement('div');\n  applyStyles(tooltip, controlStripStyles.tooltip);\n  tooltip.textContent = message;\n\n  // Position the tooltip above the element\n  var rect = element.getBoundingClientRect();\n  tooltip.style.top = \"\".concat(rect.top - 30, \"px\");\n  tooltip.style.left = \"\".concat(rect.left + rect.width / 2, \"px\");\n  tooltip.style.transform = 'translateX(-50%)';\n\n  // Add to document\n  document.body.appendChild(tooltip);\n\n  // Show tooltip\n  setTimeout(function () {\n    tooltip.style.opacity = '1';\n  }, 10);\n\n  // Hide and remove tooltip after 1.5 seconds\n  setTimeout(function () {\n    tooltip.style.opacity = '0';\n    setTimeout(function () {\n      document.body.removeChild(tooltip);\n    }, 300);\n  }, 1500);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ControlStrip.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ControlStrip: () => (/* reexport module object */ _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   Coordinates: () => (/* reexport safe */ _utils_coordinates__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   SettingsBuilder: () => (/* reexport safe */ _SettingsBuilder__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   VideoPlayerAdapter: () => (/* reexport safe */ _adapters_VideoPlayerAdapter_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   autoInitialize: () => (/* binding */ autoInitialize),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _QuadTap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QuadTap */ \"./src/QuadTap.js\");\n/* harmony import */ var _QuadTap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_QuadTap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _SettingsBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SettingsBuilder */ \"./src/SettingsBuilder.js\");\n/* harmony import */ var _adapters_VideoPlayerAdapter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapters/VideoPlayerAdapter.js */ \"./src/adapters/VideoPlayerAdapter.js\");\n/* harmony import */ var _utils_coordinates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/coordinates */ \"./src/utils/coordinates.js\");\n/* harmony import */ var _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/ControlStrip */ \"./src/components/ControlStrip.js\");\n/**\n * QuadTap - Interactive Video Overlay Component\n * Main entry point for the QuadTap package\n */\n\n\n\n\n\n\n\n// Global flag to indicate QuadTap initialization status\nwindow.quadTapInitialized = false;\n\n// Auto-initialization function\nvar autoInitialize = function autoInitialize() {\n  // If the React root element for mui-debug-app exists, do not auto-initialize plain JS QuadTap.\n  // This helps prevent conflicts on pages dedicated to the React component version.\n  if (document.getElementById('root')) {\n    console.log('[QuadTap] React root element (#root) found, skipping plain JS auto-initialization.');\n    return;\n  }\n\n  // If already initialized, don't initialize again\n  if (window.quadTapInitialized) {\n    console.log('[QuadTap] Already initialized, skipping auto-initialization');\n    return;\n  }\n\n  // First check for containers with data attribute\n  var containers = document.querySelectorAll('[data-quad-tap-auto-init]');\n\n  // If no containers with data attribute, check for default container ID\n  if (containers.length === 0) {\n    var defaultContainer = document.getElementById('main-video-droppable');\n    if (defaultContainer) {\n      console.log('[QuadTap] Auto-initializing with default container');\n\n      // Initialize with default settings\n      window.quadTap = new (_QuadTap__WEBPACK_IMPORTED_MODULE_0___default())();\n\n      // Store instance on container for future reference\n      defaultContainer.quadTap = window.quadTap;\n\n      // Set global initialization flag\n      window.quadTapInitialized = true;\n\n      // Expose helper functions to global scope for testing and debugging\n      window.activateOverlay = function (x, y) {\n        if (window.quadTap) {\n          // Get container dimensions\n          var container = document.getElementById('main-video-droppable');\n          if (container) {\n            var rect = container.getBoundingClientRect();\n            // If x and y are not provided, use center of container\n            var posX = x || rect.width / 2;\n            var posY = y || rect.height / 2;\n            return window.quadTap.activateOverlay(posX, posY);\n          }\n        }\n        return false;\n      };\n      window.openLightBox = function () {\n        if (window.quadTap) {\n          window.quadTap.openLightBox();\n          return true;\n        }\n        return false;\n      };\n      window.ensureControlStripModuleAvailable = function () {\n        // Make sure the updatePlayPauseButton function is available globally\n        if (!window.updatePlayPauseButton && _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__.updatePlayPauseButton) {\n          window.updatePlayPauseButton = _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__.updatePlayPauseButton;\n        }\n      };\n\n      // Ensure the updatePlayPauseButton function is available globally\n      window.ensureControlStripModuleAvailable();\n      return;\n    }\n  }\n\n  // Process containers with data attribute\n  if (containers.length > 0) {\n    console.log(\"[QuadTap] Auto-initializing \".concat(containers.length, \" containers\"));\n    containers.forEach(function (container) {\n      // Get container ID\n      var containerId = container.id;\n      if (!containerId) {\n        console.warn('[QuadTap] Container must have an ID for auto-initialization');\n        return;\n      }\n\n      // Get video selector from data attribute or default to 'video'\n      var videoSelector = container.getAttribute('data-quad-tap-video-selector') || 'video';\n\n      // Get profile image URL if provided\n      var profileImageUrl = container.getAttribute('data-quad-tap-profile-image');\n\n      // Create settings builder\n      var settingsBuilder = new _SettingsBuilder__WEBPACK_IMPORTED_MODULE_1__[\"default\"]().withContainer(containerId).withVideoSelector(videoSelector).withAutoInitialize(true);\n\n      // Add profile image if provided\n      if (profileImageUrl) {\n        settingsBuilder.withProfileBubble({\n          imageUrl: profileImageUrl\n        });\n      }\n\n      // Check for custom colors\n      var overlayBgColor = container.getAttribute('data-quad-tap-overlay-bg');\n      var lightboxBgColor = container.getAttribute('data-quad-tap-lightbox-bg');\n      if (overlayBgColor || lightboxBgColor) {\n        var colorConfig = {};\n        if (overlayBgColor) {\n          colorConfig.overlay = {\n            background: overlayBgColor\n          };\n        }\n        if (lightboxBgColor) {\n          colorConfig.lightbox = {\n            background: lightboxBgColor\n          };\n        }\n        settingsBuilder.withColors(colorConfig);\n      }\n\n      // Initialize QuadTap\n      var quadTap = new (_QuadTap__WEBPACK_IMPORTED_MODULE_0___default())(settingsBuilder.build());\n\n      // Store instance on container for future reference\n      container.quadTap = quadTap;\n\n      // If this is the first container, store it globally\n      if (!window.quadTap) {\n        window.quadTap = quadTap;\n      }\n    });\n\n    // Set global initialization flag\n    window.quadTapInitialized = true;\n\n    // Expose helper functions to global scope for testing and debugging\n    window.activateOverlay = function (x, y) {\n      if (window.quadTap) {\n        // Get container dimensions\n        var container = document.querySelector('[data-quad-tap-auto-init]') || document.getElementById('main-video-droppable');\n        if (container) {\n          var rect = container.getBoundingClientRect();\n          // If x and y are not provided, use center of container\n          var posX = x || rect.width / 2;\n          var posY = y || rect.height / 2;\n          return window.quadTap.activateOverlay(posX, posY);\n        }\n      }\n      return false;\n    };\n    window.openLightBox = function () {\n      if (window.quadTap) {\n        window.quadTap.openLightBox();\n        return true;\n      }\n      return false;\n    };\n    window.ensureControlStripModuleAvailable = function () {\n      // Make sure the updatePlayPauseButton function is available globally\n      if (!window.updatePlayPauseButton && _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__.updatePlayPauseButton) {\n        window.updatePlayPauseButton = _components_ControlStrip__WEBPACK_IMPORTED_MODULE_4__.updatePlayPauseButton;\n      }\n    };\n\n    // Ensure the updatePlayPauseButton function is available globally\n    window.ensureControlStripModuleAvailable();\n  }\n};\n\n// Run auto-initialization when DOM is ready\nif (typeof document !== 'undefined') {\n  // Try to initialize on DOMContentLoaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', autoInitialize);\n  } else {\n    // DOM already loaded, run auto-initialization immediately\n    autoInitialize();\n  }\n\n  // Also try to initialize on window load as a fallback\n  // This helps with cases where the video element might be loaded dynamically\n  window.addEventListener('load', function () {\n    if (!window.quadTapInitialized) {\n      console.log('[QuadTap] Attempting initialization on window load');\n      autoInitialize();\n    }\n  });\n\n  // Final attempt after a short delay to catch any late-loading elements\n  setTimeout(function () {\n    if (!window.quadTapInitialized) {\n      console.log('[QuadTap] Final attempt to initialize QuadTap...');\n      autoInitialize();\n    }\n  }, 1000);\n\n  // Force initialization if it hasn't happened after 2 seconds\n  // This is a fallback for cases where the container might be dynamically added\n  setTimeout(function () {\n    if (!window.quadTapInitialized) {\n      console.log('[QuadTap] Forcing initialization...');\n      // Try to find any video container\n      var containers = document.querySelectorAll('[data-quad-tap-auto-init]');\n      var defaultContainer = document.getElementById('main-video-droppable');\n      if (containers.length > 0 || defaultContainer) {\n        console.log('[QuadTap] Found container, initializing...');\n        autoInitialize();\n      } else {\n        console.log('[QuadTap] No container found, creating default container...');\n        // Create a default container if none exists\n        var videoElements = document.querySelectorAll('video');\n        if (videoElements.length > 0) {\n          var video = videoElements[0];\n          var parent = video.parentElement;\n\n          // Create a wrapper div with the default ID\n          var wrapper = document.createElement('div');\n          wrapper.id = 'main-video-droppable';\n          wrapper.style.position = 'relative';\n\n          // Replace the video with the wrapper and add the video inside\n          parent.replaceChild(wrapper, video);\n          wrapper.appendChild(video);\n          console.log('[QuadTap] Created default container, initializing...');\n          autoInitialize();\n        }\n      }\n    }\n  }, 2000);\n}\n\n// Export the main QuadTap class as default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((_QuadTap__WEBPACK_IMPORTED_MODULE_0___default()));\n\n// Export additional classes and utilities\n\n\n// Example usage:\n/*\n// Using the default constructor\nconst quadTap = new QuadTap({\n  containerId: 'video-container',\n  videoSelector: '#my-video'\n});\n\n// Using the settings builder\nimport { QuadTap, SettingsBuilder, VideoPlayerAdapter, Coordinates } from 'quad-tap';\n\n// Create a video player adapter\nconst videoAdapter = VideoPlayerAdapter.forHtml5Video(\n  document.querySelector('#my-video'),\n  true // debug mode\n);\n\n// Build settings with fluent interface\nconst settings = new SettingsBuilder()\n  .withContainer('video-container')\n  .withVideoSelector('#my-video')\n  .withDebug(true)\n  .withAutoCancelTimeout(3000)\n  .withQuadrantEmojis({\n    topLeft: \"🕊️\",\n    topRight: \"🌟\",\n    bottomLeft: \"🌧️\",\n    bottomRight: \"💥\"\n  })\n  .withVideoPlayerApi({\n    enabled: true,\n    playMethod: () => videoAdapter.play(),\n    pauseMethod: () => videoAdapter.pause(),\n    seekMethod: (time) => videoAdapter.seek(time),\n    getCurrentTimeMethod: () => videoAdapter.getCurrentTime(),\n    getDurationMethod: () => videoAdapter.getDuration(),\n    getVideoIdMethod: () => videoAdapter.getVideoId()\n  })\n  .withCoordinateSystem({\n    type: 'normalized', // 'normalized', 'percentage', or 'absolute'\n    storeMetadata: true // Include container dimensions in stored data\n  })\n  .onOverlayActivate((coordinates) => {\n    console.log('Overlay activated at', coordinates);\n    // coordinates contains both absolute and normalized positions\n  })\n  .onThrowDownConfirm((quadrant, coordinates, videoInfo) => {\n    console.log('Throw-down confirmed in', quadrant);\n    console.log('Coordinates:', coordinates);\n    console.log('Video info:', videoInfo);\n  })\n  .build();\n\n// Initialize QuadTap with the settings\nconst quadTap = new QuadTap(settings);\n\n// Using the Coordinates utility directly\nconst containerWidth = 800;\nconst containerHeight = 600;\nconst absoluteX = 400;\nconst absoluteY = 300;\n\n// Convert to normalized coordinates (0-1)\nconst { normalizedX, normalizedY } = Coordinates.normalize(\n  absoluteX, \n  absoluteY, \n  containerWidth, \n  containerHeight\n);\n\n// Get the quadrant\nconst quadrant = Coordinates.getQuadrant(normalizedX, normalizedY);\n\n// Create a complete coordinate data object\nconst coordinateData = Coordinates.createData(\n  absoluteX,\n  absoluteY,\n  containerWidth,\n  containerHeight\n);\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/utils/coordinates.js":
/*!**********************************!*\
  !*** ./src/utils/coordinates.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCoordinateData: () => (/* binding */ createCoordinateData),\n/* harmony export */   \"default\": () => (/* binding */ Coordinates),\n/* harmony export */   denormalizeCoordinates: () => (/* binding */ denormalizeCoordinates),\n/* harmony export */   fromPercentageCoordinates: () => (/* binding */ fromPercentageCoordinates),\n/* harmony export */   getQuadrantFromAbsoluteCoordinates: () => (/* binding */ getQuadrantFromAbsoluteCoordinates),\n/* harmony export */   getQuadrantFromNormalizedCoordinates: () => (/* binding */ getQuadrantFromNormalizedCoordinates),\n/* harmony export */   normalizeCoordinates: () => (/* binding */ normalizeCoordinates),\n/* harmony export */   toPercentageCoordinates: () => (/* binding */ toPercentageCoordinates)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Coordinates utility functions\n * Provides methods for normalizing and denormalizing coordinates\n */\n\n/**\n * Convert absolute coordinates to normalized (0-1) coordinates\n * @param {number} x - The absolute x coordinate\n * @param {number} y - The absolute y coordinate\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {Object} The normalized coordinates\n */\nfunction normalizeCoordinates(x, y, containerWidth, containerHeight) {\n  return {\n    normalizedX: containerWidth > 0 ? x / containerWidth : 0,\n    normalizedY: containerHeight > 0 ? y / containerHeight : 0\n  };\n}\n\n/**\n * Convert normalized (0-1) coordinates to absolute coordinates\n * @param {number} normalizedX - The normalized x coordinate (0-1)\n * @param {number} normalizedY - The normalized y coordinate (0-1)\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {Object} The absolute coordinates\n */\nfunction denormalizeCoordinates(normalizedX, normalizedY, containerWidth, containerHeight) {\n  return {\n    x: normalizedX * containerWidth,\n    y: normalizedY * containerHeight\n  };\n}\n\n/**\n * Convert absolute coordinates to percentage (0-100%) coordinates\n * @param {number} x - The absolute x coordinate\n * @param {number} y - The absolute y coordinate\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {Object} The percentage coordinates\n */\nfunction toPercentageCoordinates(x, y, containerWidth, containerHeight) {\n  return {\n    percentX: containerWidth > 0 ? x / containerWidth * 100 : 0,\n    percentY: containerHeight > 0 ? y / containerHeight * 100 : 0\n  };\n}\n\n/**\n * Convert percentage (0-100%) coordinates to absolute coordinates\n * @param {number} percentX - The percentage x coordinate (0-100%)\n * @param {number} percentY - The percentage y coordinate (0-100%)\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {Object} The absolute coordinates\n */\nfunction fromPercentageCoordinates(percentX, percentY, containerWidth, containerHeight) {\n  return {\n    x: percentX / 100 * containerWidth,\n    y: percentY / 100 * containerHeight\n  };\n}\n\n/**\n * Determine the quadrant based on normalized coordinates\n * @param {number} normalizedX - The normalized x coordinate (0-1)\n * @param {number} normalizedY - The normalized y coordinate (0-1)\n * @returns {string} The quadrant identifier ('ne', 'nw', 'se', 'sw')\n */\nfunction getQuadrantFromNormalizedCoordinates(normalizedX, normalizedY) {\n  var isRight = normalizedX >= 0.5;\n  var isBottom = normalizedY >= 0.5;\n  if (isRight && !isBottom) return 'ne';\n  if (!isRight && !isBottom) return 'nw';\n  if (isRight && isBottom) return 'se';\n  return 'sw';\n}\n\n/**\n * Determine the quadrant based on absolute coordinates\n * @param {number} x - The absolute x coordinate\n * @param {number} y - The absolute y coordinate\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {string} The quadrant identifier ('ne', 'nw', 'se', 'sw')\n */\nfunction getQuadrantFromAbsoluteCoordinates(x, y, containerWidth, containerHeight) {\n  var _normalizeCoordinates = normalizeCoordinates(x, y, containerWidth, containerHeight),\n    normalizedX = _normalizeCoordinates.normalizedX,\n    normalizedY = _normalizeCoordinates.normalizedY;\n  return getQuadrantFromNormalizedCoordinates(normalizedX, normalizedY);\n}\n\n/**\n * Create a coordinate data object with both absolute and normalized coordinates\n * @param {number} x - The absolute x coordinate\n * @param {number} y - The absolute y coordinate\n * @param {number} containerWidth - The width of the container\n * @param {number} containerHeight - The height of the container\n * @returns {Object} The coordinate data object\n */\nfunction createCoordinateData(x, y, containerWidth, containerHeight) {\n  var _normalizeCoordinates2 = normalizeCoordinates(x, y, containerWidth, containerHeight),\n    normalizedX = _normalizeCoordinates2.normalizedX,\n    normalizedY = _normalizeCoordinates2.normalizedY;\n  var _toPercentageCoordina = toPercentageCoordinates(x, y, containerWidth, containerHeight),\n    percentX = _toPercentageCoordina.percentX,\n    percentY = _toPercentageCoordina.percentY;\n  var quadrant = getQuadrantFromNormalizedCoordinates(normalizedX, normalizedY);\n  return {\n    absolute: {\n      x: x,\n      y: y\n    },\n    normalized: {\n      x: normalizedX,\n      y: normalizedY\n    },\n    percentage: {\n      x: percentX,\n      y: percentY\n    },\n    container: {\n      width: containerWidth,\n      height: containerHeight\n    },\n    quadrant: quadrant\n  };\n}\n\n/**\n * Coordinates utility class\n * Provides methods for working with coordinates in different formats\n */\nvar Coordinates = /*#__PURE__*/function () {\n  function Coordinates() {\n    _classCallCheck(this, Coordinates);\n  }\n  return _createClass(Coordinates, null, [{\n    key: \"normalize\",\n    value:\n    /**\n     * Convert absolute coordinates to normalized (0-1) coordinates\n     * @param {number} x - The absolute x coordinate\n     * @param {number} y - The absolute y coordinate\n     * @param {number} containerWidth - The width of the container\n     * @param {number} containerHeight - The height of the container\n     * @returns {Object} The normalized coordinates\n     */\n    function normalize(x, y, containerWidth, containerHeight) {\n      return normalizeCoordinates(x, y, containerWidth, containerHeight);\n    }\n\n    /**\n     * Convert normalized (0-1) coordinates to absolute coordinates\n     * @param {number} normalizedX - The normalized x coordinate (0-1)\n     * @param {number} normalizedY - The normalized y coordinate (0-1)\n     * @param {number} containerWidth - The width of the container\n     * @param {number} containerHeight - The height of the container\n     * @returns {Object} The absolute coordinates\n     */\n  }, {\n    key: \"denormalize\",\n    value: function denormalize(normalizedX, normalizedY, containerWidth, containerHeight) {\n      return denormalizeCoordinates(normalizedX, normalizedY, containerWidth, containerHeight);\n    }\n\n    /**\n     * Convert absolute coordinates to percentage (0-100%) coordinates\n     * @param {number} x - The absolute x coordinate\n     * @param {number} y - The absolute y coordinate\n     * @param {number} containerWidth - The width of the container\n     * @param {number} containerHeight - The height of the container\n     * @returns {Object} The percentage coordinates\n     */\n  }, {\n    key: \"toPercentage\",\n    value: function toPercentage(x, y, containerWidth, containerHeight) {\n      return toPercentageCoordinates(x, y, containerWidth, containerHeight);\n    }\n\n    /**\n     * Convert percentage (0-100%) coordinates to absolute coordinates\n     * @param {number} percentX - The percentage x coordinate (0-100%)\n     * @param {number} percentY - The percentage y coordinate (0-100%)\n     * @param {number} containerWidth - The width of the container\n     * @param {number} containerHeight - The height of the container\n     * @returns {Object} The absolute coordinates\n     */\n  }, {\n    key: \"fromPercentage\",\n    value: function fromPercentage(percentX, percentY, containerWidth, containerHeight) {\n      return fromPercentageCoordinates(percentX, percentY, containerWidth, containerHeight);\n    }\n\n    /**\n     * Determine the quadrant based on normalized coordinates\n     * @param {number} normalizedX - The normalized x coordinate (0-1)\n     * @param {number} normalizedY - The normalized y coordinate (0-1)\n     * @returns {string} The quadrant identifier ('ne', 'nw', 'se', 'sw')\n     */\n  }, {\n    key: \"getQuadrant\",\n    value: function getQuadrant(normalizedX, normalizedY) {\n      return getQuadrantFromNormalizedCoordinates(normalizedX, normalizedY);\n    }\n\n    /**\n     * Create a coordinate data object with both absolute and normalized coordinates\n     * @param {number} x - The absolute x coordinate\n     * @param {number} y - The absolute y coordinate\n     * @param {number} containerWidth - The width of the container\n     * @param {number} containerHeight - The height of the container\n     * @returns {Object} The coordinate data object\n     */\n  }, {\n    key: \"createData\",\n    value: function createData(x, y, containerWidth, containerHeight) {\n      return createCoordinateData(x, y, containerWidth, containerHeight);\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/coordinates.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;